#if	!defined(DATSZ)

/*                             DAT000 - point DATA file */
/*                             ------------------------ */

/*     SCCS REVISION: */
/*         @(#)dat000_def,v	830.1 */

/*     NOTES: */
/*   1) Reals and integer*4s must start on words 1,3,5 etc. */
/*   2) Doubles must start on 1,5,9 etc. */
/*   3) Sizes must be multiple of 4 to maintain 64 bit alignment. */
/*   4) Certain bits in the "flags" and "auth" fields in the CDA and ASH point structure  */
/*      are replicated to the Console Stations and the replication of these fields is  */
/*      controlled by the bit masks (POINTFLAGS_CONFIGMASK and POINTAUTH_CONFIGMASK). If  */
/*      you intend to change these fields, please determine whether the information needs  */
/*      to be replicated to the Console Station. If necessary, you will need to update  */
/*      the bit masks. */


/*       integer*2      DATSZ, DATSZ_STA, DATSZ_ANA, DATSZ_ACC */
/*       integer*2	            DATSZ_ACS, DATSZ_CDA, DATSZ_ASH */
#define	DATSZ	24	
#define	DATSZ_STA	12	
#define	DATSZ_ANA	24	
#define	DATSZ_ACC	24	
#define	DATSZ_ACS	16	
#define	DATSZ_CDA	12	
#define	DATSZ_ASH	12	



#define	POINTFLAGS_CONFIGMASK	0xC000	 /*   field mask for the "flags" field */
#define	POINTAUTH_CONFIGMASK	0x0002	  /*   field mask for the control authorized flag */

#if	!defined(USE_DERIVED_TYPE)
/*       integer*2     DATBUF(DATSZ) */
#endif	


/*         STATUS point */

/*                             5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                            --------------------------------- */
/*                          1 !A!B!C!D!E!F!G!H!I!J!K!L!   M   ! */
/*                            --------------------------------- */
/*                          2 !       Ni      !O!P!Q!R!S!T!U!V! */
/*                            --------------------------------- */
/*                          3 !       Wi      !      Xi       ! */
/*                            --------------------------------- */
/*                          4 ! Area number                   ! */
/*                            --------------------------------- */
/*                        5-6 ! Create time                   ! */
/*                             --------------------------------- */
/*                          7 ! Ow! Pw!  op   !  pv   ! mode  ! */
/*                            --------------------------------- */
/*                          8 !      alarm states map         ! */
/*                            --------------------------------- */
/*                       9-10 ! last time PV processed (secs) ! */
/*                            --------------------------------- */
/*                         11 ! last day PV processed         ! */
/*                            --------------------------------- */
/*                         12 !      spare                    ! */
/*                            --------------------------------- */


typedef struct
    {
    uint2 flags;		/* flags (as above)		*/
    uint2 auth;		/* control authorised flags	*/
    uint2 error;		/* error flags	     		*/
    uint2 area;		/* area number			*/
    uint4 createtime;		/* create time (C time)		*/
    uint2 mode;		/* PV, OP, and mode   		*/
    uint2 alarms;		/* alarm states map		*/
    float timelp;		/* time last processed (sec)	*/
    uint2 datelp;		/* date last processed (day)	*/
    uint2 spare12;
    } STA_DAT;


/*       integer*2      IMPLEM, ONSCAN, PRINIT, ALMUNA, PRINH, APRINH */
/*       integer*2      OPREV, TRNSIT, PVALGE, ACALGE, CLMP, RQPVER, PRALM */
/*       integer*2      NOALM, STAALM, STACHG */
/*       integer*2      RATE, DVLO, DVHI, XTLO, XTHI, PVLO, PVHI */
/*       integer*2      PVLOLO, PVHIHI, RSLO, RSHI, USRALM */
/*       integer*2      CNTAUT, PVAUT, MDAUT, OPAUT, SPAUT */
/*       integer*2              A1AUT, A2AUT, A3AUT, A4AUT */
/*       integer*2      FIREPT, PNT_NOJNL, ALM_OVERFLOW */
/*       integer*2      DAT_PNTACKTR, DAT_PNTBUILT, DAT_QUESTIONABLE */
/*       integer*2      XCHG, XPVCHG, XMDCHG, XOPCHG, XSPCHG */
/*       integer*2            XA1CHG, XA2CHG, XA3CHG, XA4CHG */
/*       integer*2      INEROR, PVERR, MDERR, OPERR, SPERR */
/*       integer*2              A1ERR, A2ERR, A3ERR, A4ERR */
/*       integer*2      PRACD, PRCTM */
/*       integer*2      MDSTA, PVSTA, OPSTA, OPWD, PVWD, ALMMAP */

#define	IMPLEM	0x0F01		  /*  A - point implemented */
#define	ONSCAN	0x0E01		  /*  B - point on scan */
#define	PRINIT	0x0D01		  /*  C - point record initializing */
#define	ALMUNA	0x0C01		  /*  D - point alarm unacknowledged */
#define	PRINH	0x0B01		  /*  E - point alarming inhibited */
#define	APRINH	0x0A01		  /*  F - point alarm processing */
/*                                              inhibited */
/*                                              0 - alarm determined by */
/*                                                  point processor */
/*                                              1 - alarm determined by RTU */
#define	OPREV	0x0901		  /*  G - reverse output indicator */
#define	TRNSIT	0x0801		  /*  H - alarm transitions between */
/*                                              alarm states. */
#define	PVALGE	0x0701		  /*  I - PV algo exists */
#define	ACALGE	0x0601		  /*  J - Action algo exists */
#define	CLMP	0x0501		  /*  K - clamp pv at 0 & 100 % */
#define	RQPVER	0x0401		  /*  L - request pv error */
#define	PRALM	0x3001		  /*  M - point alarm state */
#define	NOALM	0	        /*      no alarm */
/*                                          STATUS point alarms */
#define	STAALM	1	        /*      alarm */
#define	STACHG	2	        /*      change */
/*                                          ANALOG + ACCUML point alarms */
#define	RATE	1	        /*      rate */
#define	DVLO	2	        /*      deviation low */
#define	DVHI	3	        /*      deviation high */
#define	XTLO	4	        /*      PV transmitter low */
#define	XTHI	5	        /*      PV transmitter high */
#define	PVLO	6	        /*      PV low */
#define	PVHI	7	        /*      PV high */
#define	PVLOLO	8	        /*      PV low low */
#define	PVHIHI	9	        /*      PV high high */
#define	RSLO	10	       /*      PV unreasonably low */
#define	RSHI	11	       /*      PV unreasonably high */
#define	USRALM	12	       /*      user alarm 1 */
/*     parameter     (USRALM = 13)       ;*     user alarm 2 */
/*     parameter     (USRALM = 14)       ;*     user alarm 3 */
/*     parameter     (USRALM = 15)       ;*     user alarm 4 */
#define	CNTAUT	0x7802		  /*  N - control authorised for */
#define	PVAUT	0x0802		  /*      parameter. */
#define	MDAUT	0x0902		  /*      Set during control. */
#define	OPAUT	0x0A02		  /*  */
#define	SPAUT	0x0B02		  /*  */
#define	A1AUT	0x0C02		  /*  */
#define	A2AUT	0x0D02		  /*  */
#define	A3AUT	0x0E02		  /*  */
#define	A4AUT	0x0F02		  /*  */
#define	FIREPT	0x0702		  /*  O - Fire point */
#define	PNT_NOJNL	0x0602		  /*  P - suppress journal of alarm */
#define	ALM_OVERFLOW	0x0502		  /*  Q - Alarm overflow on point */
/*     parameter     (                   = Z'0402')  ;* R - */
/*     parameter     (                   = Z'0302')  ;* S - */
#define	DAT_PNTACKTR	0x0202		  /*  T - Point transitioned from unacked to acked */
#define	DAT_PNTBUILT	0x0102		  /*  U - Point was built (1) not discovered (0) */
#define	DAT_QUESTIONABLE	0x0002		  /*  V - Point is questionable */
#define	XCHG	0x7803		  /*  w - external change not permitted. */
#define	XPVCHG	0x0803		  /*      Set if no external changes */
#define	XMDCHG	0x0903		  /*      are permitted. */
#define	XOPCHG	0x0A03		  /*  */
#define	XSPCHG	0x0B03		  /*  */
#define	XA1CHG	0x0C03		  /*  */
#define	XA2CHG	0x0D03		  /*  */
#define	XA3CHG	0x0E03		  /*  */
#define	XA4CHG	0x0F03		  /*  */
#define	INEROR	0x7003		  /*  x - parameter in error. */
#define	PVERR	0x0003		  /*      Set while data is */
#define	MDERR	0x0103		  /*      questionable */
#define	OPERR	0x0203		  /*  */
#define	SPERR	0x0303		  /*  */
#define	A1ERR	0x0403		  /*  */
#define	A2ERR	0x0503		  /*  */
#define	A3ERR	0x0603		  /*  */
#define	A4ERR	0x0703		  /*  */
#define	PRACD	0xF004		  /*      area number */
#define	PRCTM	0x0005		  /*      create time */
#define	MDSTA	0x3007		  /*      Mode state */
#define	PVSTA	0x3407		  /*      PV state */
#define	OPSTA	0x3807		  /*      OP state */
#define	OPWD	0x1E07		  /*  Ow- OP width (0-1) */
#define	PVWD	0x1C07		  /*  Pw- PV width (0-2) */
/*                                              0 - 1 bit */
/*                                              1 - 2 bit */
/*                                              2 - 3 bit */
/*                                              3 - 4 bit */
#define	ALMMAP	0xF008		  /*      Alarm state maps */
/*	 - for Status Points, the lower 8 bits represent the states */
/*	which are Alarm States, and the upper 8 bits represent the */
/*	states which are currently in Alarm. */
/*	 - for Analog/Accum. points, each bit represents a point alarm */
/*	state. */
/*       integer*2      ALMMAP0, ALMMAP1, ALMMAP2, ALMMAP3 */
/*       integer*2      ALMMAP4, ALMMAP5, ALMMAP6, ALMMAP7 */
/*       integer*2      ALMMAP8, ALMMAP9, ALMMAP10, ALMMAP11 */
/*       integer*2      ALMMAP12, ALMMAP13, ALMMAP14, ALMMAP15 */
#define	ALMMAP0	0x0008		 /*     Alarm state map bit 0 */
#define	ALMMAP1	0x0108		 /*     Alarm state map bit 1 */
#define	ALMMAP2	0x0208		 /*     Alarm state map bit 2 */
#define	ALMMAP3	0x0308		 /*     Alarm state map bit 3 */
#define	ALMMAP4	0x0408		 /*     Alarm state map bit 4 */
#define	ALMMAP5	0x0508		 /*     Alarm state map bit 5 */
#define	ALMMAP6	0x0608		 /*     Alarm state map bit 6 */
#define	ALMMAP7	0x0708		 /*     Alarm state map bit 7 */
#define	ALMMAP8	0x0808		 /*     Alarm state map bit 8 */
#define	ALMMAP9	0x0908		 /*     Alarm state map bit 9 */
#define	ALMMAP10	0x0A08		 /*     Alarm state map bit 10 */
#define	ALMMAP11	0x0B08		 /*     Alarm state map bit 11 */
#define	ALMMAP12	0x0C08		 /*     Alarm state map bit 12 */
#define	ALMMAP13	0x0D08		 /*     Alarm state map bit 13 */
#define	ALMMAP14	0x0E08		 /*     Alarm state map bit 14 */
#define	ALMMAP15	0x0F08		 /*     Alarm state map bit 15 */

/*       integer*2      PVSECP, PVDAYP */
#define	PVSECP	0x0009		   /*      last time PV processed */
#define	PVDAYP	0xF00B		   /*      last date PV processed */

#if	!defined(USE_DERIVED_TYPE)
/*       real          PVSECV */
/*       integer*2     PVDAYV */
/*       equivalence ( PVSECV, $buf(PVSECP) ) */
/*       equivalence ( PVDAYV, $buf(PVDAYP) ) */
#endif	


/*         ANALOG point */
/*                             5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                            --------------------------------- */
/*                          1 !A!B!C!D!E!F!G!H!I!J!K!L!   M   ! */
/*                            --------------------------------- */
/*                          2 !       Ni      !O!P!Q!R!S!T!U!V! */
/*                            --------------------------------- */
/*                          3 !       Wi      !      Xi       ! */
/*                            --------------------------------- */
/*                          4 ! Area number                   ! */
/*                            --------------------------------- */
/*                        5-6 ! Create time                   ! */
/*                             --------------------------------- */
/*                          7 !   Dd  !   Ad  !   Cd  ! mode  ! */
/*                            --------------------------------- */
/*                          8 !      Alarm state map          ! */
/*                            --------------------------------- */
/*                       9-10 ! last time PV processed (secs) ! */
/*                            --------------------------------- */
/*                         11 ! last day PV processed         ! */
/*                            --------------------------------- */
/*                         12 !      spare                    ! */
/*                            --------------------------------- */
/*                      13-16 !              pv (eu)          ! */
/*                            --------------------------------- */
/*                      17-20 !            100% (eu)          ! */
/*                            --------------------------------- */
/*                      21-24 !              0% (eu)          ! */
/*                            --------------------------------- */


typedef struct
    {
    uint2 flags;		/* flags (as above)		*/
    uint2 auth;		/* control authorised flags	*/
    uint2 error;		/* error flags	     		*/
    uint2 area;		/* area number			*/
    uint4 createtime;		/* create time (C time)		*/
    uint2 mode;		/* deadmabds and mode 		*/
    uint2 alarms;		/* alarm states map		*/
    float timelp;		/* time last processed (sec)	*/
    uint2 datelp;		/* date last processed (day)	*/
    uint2 spare12;
    double pv;		/*  PV  (eu)			*/
    double euhi;		/* 100% (eu)			*/
    double eulo;		/*   0% (eu)			*/
    } ANA_DAT;


/*       integer*2      DDBP, ADBP, CDBP, PVP, EUHIP, EULOP */
#define	DDBP	0x3C07		   /*  Dd- drift deadband index (0-15) */
#define	ADBP	0x3807		   /*  Ad- alarm deadband index (0-15) */
#define	CDBP	0x3407		   /*  Cd- control confirmation */
/*                                              deadband index (0-15) */
#define	PVP	0x000D		   /*      process value */
#define	EUHIP	0x0011		   /*      engineering units high */
#define	EULOP	0x0015		   /*      engineering units low */

#if	!defined(USE_DERIVED_TYPE)
/*       real          DDB ,CDB ,ADB                ;* deadband values */
/*       double precision PVV, EUHIV, EULOV */
/*       equivalence ( PVV   , $buf(PVP  ) ) */
/*       equivalence ( EUHIV , $buf(EUHIP) ) */
/*       equivalence ( EULOV , $buf(EULOP) ) */
#endif	


/*         ACCUML point */
/*                             5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                            --------------------------------- */
/*                          1 !A!B!C!D!E!F!G!H!I!J!K!L!   M   ! */
/*                            --------------------------------- */
/*                          2 !       Ni      !O!P!Q!R!S!T!U!V! */
/*                            --------------------------------- */
/*                          3 !       Wi      !      Xi       ! */
/*                            --------------------------------- */
/*                          4 ! Area number                   ! */
/*                            --------------------------------- */
/*                        5-6 ! Create time                   ! */
/*                             --------------------------------- */
/*                          7 !   -   !   Ad  !   -   ! mode  ! */
/*                            --------------------------------- */
/*                          8 !       Alarm state map         ! */
/*                            --------------------------------- */
/*                       9-10 ! last time PV processed (secs) ! */
/*                            --------------------------------- */
/*                         11 ! last day PV processed         ! */
/*                            --------------------------------- */
/*                         12 !      spare                    ! */
/*                            --------------------------------- */
/*                      13-16 !              pv (eu)          ! */
/*                            --------------------------------- */
/*                      17-20 !            100% (eu)          ! */
/*                            --------------------------------- */
/*                      21-22 !    accumulator raw value      ! */
/*                            --------------------------------- */
/*                      23-24 !  accumulator rollover value   ! */
/*                            --------------------------------- */


typedef struct
    {
    uint2 flags;		/* flags (as above)		*/
    uint2 auth;		/* control authorised flags	*/
    uint2 error;		/* error flags	     		*/
    uint2 area;		/* area number			*/
    uint4 createtime;		/* create time (C time)		*/
    uint2 mode;		/* deadmabds and mode 		*/
    uint2 alarms;		/* alarm states map		*/
    float timelp;		/* time last processed (sec)	*/
    uint2 datelp;		/* date last processed (day)	*/
    uint2 spare12;
    double pv;		/*  PV  (eu)			*/
    double euhi;		/* 100% (eu)			*/
    int4  raw;		/* raw value			*/
    int4  rollover;		/* rolover value		*/
    } ACC_DAT;


/*       integer*2      RAWP, ROLP */
#define	RAWP	0x0015		   /*      raw value */
#define	ROLP	0x0017		   /*      rollover value */

#if	!defined(USE_DERIVED_TYPE)
/*       integer*4      RAWV, ROLV */
/*       equivalence   (RAWV  , $buf(RAWP) ) */
/*       equivalence   (ROLV  , $buf(ROLP) ) */
#endif	


/*         ACCESS point */
/*                             5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                            --------------------------------- */
/*                          1 !A!B!C!D!E!F!G!H!I!J!K!L!   M   ! */
/*                            --------------------------------- */
/*                          2 !       -       !O!P!Q!R!S!T!U!V! */
/*                            --------------------------------- */
/*                          3 !       -       !      -        ! */
/*                            --------------------------------- */
/*                          4 ! Area number                   ! */
/*                            --------------------------------- */
/*                        5-6 ! Create time                   ! */
/*                             --------------------------------- */
/*                          7 !W!CredTyp    !   !   status    ! */
/*                            --------------------------------- */
/*                          8 ! Entry Zone                    ! */
/*                            --------------------------------- */
/*                       9-10 ! last time PV processed (secs) ! */
/*                            --------------------------------- */
/*                         11 ! last day PV processed         ! */
/*                            --------------------------------- */
/*                         12 ! Exit Zone                     ! */
/*                            --------------------------------- */
/*                      13-16 ! card # of last card presented ! */
/*                            --------------------------------- */


typedef struct
    {
    uint2 flags;		/* flags (as above)		*/
    uint2 spare2;		/* not used			*/
    uint2 spare3;		/* not used	     		*/
    uint2 area;		/* area number			*/
    uint4 createtime;		/* create time (C time)		*/
    uint2 state;		/* access state	 		*/
    uint2 entryzone;		/* entry zone			*/
    float timelp;		/* time last processed (sec)	*/
    uint2 datelp;		/* date last processed (day)	*/
    uint2 exitzone;		/* exit zone			*/
    double lastcard;		/* last card present (double)	*/
    } ACS_DAT;



/*       integer*2      ACSSTA, ACSTAA, LCPSTD */
/*       integer*2      AGRANT, ADFAC , ADNIM, ADAC  , ADTOD, ADPB */
/*       integer*2      AGPB  , ADBC  , ADURS, ATRACE, ADVIP, APNTM */
/*       integer*2      ADFRD , EGRANT, EDENY */
/*       integer*2      AESCORTED, AESCORT, AAUTH, ADURESS */
/*       integer*2      ACSENTRY, ACSEXIT */
/*       integer*2      ASOFTERR,ATPMOAUT1,ATPMOAUT2 */
/*       integer*2      FS90_AGRANT,FS90_ADURESS,FS90_DURESS_START,FS90_DURESS_END */
/*       integer*2      CREDTYPE, ASSETGRANT */

#define	CREDTYPE	0x5907		 /*  CREDType - Prox, Mag, FingerScan, etc */
#define	ACSTAA	0x0F07		 /*  W - Time and Attendence reader */
#define	ACSSTA	0x7007		 /*      Access state */
/*                                         Schlage */
#define	AGRANT	0 	     /*  Granted */
#define	ADFAC	1 	     /*  Denied: faciltiy code */
#define	ADNIM	2 	     /*  Denied: not in memory */
#define	ADAC	3 	     /*  Denied: access code */
#define	ADTOD	4 	     /*  Denied: time of day */
#define	ADPB	5 	     /*  Denied: passback */
#define	AGPB	6 	     /*  Granted:Soft passback violation */
#define	ADBC	7 	     /*  Denied: building not open */
#define	ADURS	8 	     /*  DURESS */
#define	ATRACE	9 	     /*  Card trace */
#define	ADVIP	10 	     /*  Denied: VIP code */
#define	APNTM	11 	     /*  Denied: PIN time out */
#define	ADFRD	12 	     /*  Denied: deferred access key */
#define	EGRANT	13 	     /*  Exit granted */
#define	EDENY	14 	     /*  Exit denied */
#define	ASSETGRANT	149	 /*  Asset Granted */
/*                                         uLPM */
#define	ATPMOAUT1	27 	  /*  2 Person min occupancy authorised 1 */
#define	ATPMOAUT2	28 	  /*  2 Person min occupancy authorised 2 */
#define	ASOFTERR	42 	  /*  Soft entry/exit error */
#define	AESCORTED	43 	  /*  Authorised and escorted */
#define	AESCORT	44 	  /*  Authorised escort */
#define	AAUTH	47 	  /*  Authorised */
#define	ADURESS	48 	  /*  Authorised under duress */

#define	FS90_AGRANT	64	 /*  FS90 Access Granted */
#define	FS90_ADURESS	80	 /*  FS90 Access Granted (Duress) */
#define	FS90_DURESS_START	80	 /*  Start of FS90 duress codes */
#define	FS90_DURESS_END	95	 /*  End of FS90 duress codes */


#define	ACSENTRY	0xF008		 /*  Entry To Zone on access */
#define	ACSEXIT	0xF00C		 /*  Exit From Zone on access */
#define	LCPSTD	0x000D		 /*  Last card presented (dble) */



/*         CDA point (and other GDA type points) */

/*                             5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                            ---------------------------------  ********************* */
/*                          1 !A!B!C!D!E!F!G!H!I!J!K!L!   M   !  * Read Note 4       * */
/*                            ---------------------------------  * before changing   * */
/*                          2 !       Ni      !O!P!Q!R!S!T!U!V!  * these two fields! * */
/*                            ---------------------------------  ********************* */
/*                          3 !       Oi      !      Pi       ! */
/*                            --------------------------------- */
/*                          4 ! Area number                   ! */
/*                            --------------------------------- */
/*                        5-6 ! Create time                   ! */
/*                            --------------------------------- */
/*                        7-8 ! Modified time                 ! */
/*                            --------------------------------- */
/*                       9-10 ! Validate time                 ! */
/*                            --------------------------------- */
/*                         11 ! Connection number             ! */
/*                            --------------------------------- */
/*                         12 !      spare                    ! */
/*                            --------------------------------- */

/*                       V - questionable alarm */
/*                       U - point built (not discovered) */

/*       integer*2      PRMTM, PRVTM,PRCON */
#define	PRMTM	0x0007		  /*  validate time */
#define	PRVTM	0x0009		  /*  validate time */
#define	PRCON	0xF00B		  /*  connection number */


typedef struct
    {
    uint2 flags;		/* flags (as above)		*/
    uint2 auth;		/* control authorised flags	*/
    uint2 error;		/* error flags	     		*/
    uint2 area;		/* area number			*/
    uint4 createtime;		/* create time (C time)		*/
    uint4 modifiedtime;	/* modified time (C time)	*/
    uint4 validatetime;	/* validate time (C time)	*/
    uint2 connection;		/* connection number		*/
    uint2 spare12;
    } CDA_DAT;




/*         ASH point (and other hierarchy points) */

/*                             5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                            --------------------------------- ********************* */
/*                          1 !A!B!C!D!E!F!G!H!I!J!K!L!   M   ! * Read Note 4       * */
/*                            --------------------------------- * before changing   * */
/*                          2 !       Ni      !O!P!Q!R!S!T!U!V! * these two fields! * */
/*                            --------------------------------- ********************* */
/*                          3 !       Oi      !      Pi       ! */
/*                            --------------------------------- */
/*                          4 ! Area number                   ! */
/*                            --------------------------------- */
/*                        5-6 ! Create time                   ! */
/*                            --------------------------------- */
/*                        7-8 ! Modified time                 ! */
/*                            --------------------------------- */
/*                       9-10 ! Validate time                 ! */
/*                            --------------------------------- */
/*                      11-12 !      spare                    ! */
/*                            --------------------------------- */


typedef struct
    {
    uint2 flags;		/* flags (as above)		*/
    uint2 auth;		/* control authorised flags	*/
    uint2 error;		/* error flags	     		*/
    uint2 area;		/* area number			*/
    uint4 createtime;		/* create time (C time)		*/
    uint4 modifiedtime;	/* modified time (C time)	*/
    uint4 validatetime;	/* validate time (C time)	*/
    uint2 spare11;
    uint2 spare12;
    } ASH_DAT;


#endif	
