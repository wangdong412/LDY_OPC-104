
/*              PRTQUE - alarm/event/report request queue to print manager */
/*              ---------------------------------------------------------- */

#if	!defined( PRQSZ )

/*     REVISION: */
/*         @(#)prtque_def,v 830.1.1.8 */

/*	This file contains EVTFIL structure. */
/*	Programs including this file must also include EVTFIL_DEF. */

#define	PRQSZ	(80+ALMEVTSZ) /*  must be multple of 4 to maintain */
/*                                                    ;* 64 bit allignment of pointers. */

#include	"src/msgdir_def"

#if	!defined( inside_IDL )

/*         PRTQUE has a queue structure. There are 4 queue headers of */
/*         length 6 words as follows: */

/*                 word 1,2 - head pointer */
/*                      3,4 - tail pointer */
/*                        5 - lock */
/*                        6 - length counter */

#define	PRQ_FREE	0 /*  queue of available records */
#define	PRQ_FIRE	1 /*  queue of fire alarms */
#define	PRQ_ALARM	2 /*  queue of alarms */
#define	PRQ_FILE	3 /*  queue of file prints */

/*         The next record after the headers is the first data record. */
/*	  It has the following general structure. */

/*                             5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                            --------------------------------- */
/*                        1,2 !   pointer to next frame       ! */
/*                            --------------------------------- */
/*                          3 !   frame priority              ! */
/*                            --------------------------------- */
/*                      4- 24 !   common data                 ! */
/*                            --------------------------------- */
/*                     25- 44 !   frame type specific data    ! */
/*                            --------------------------------- */
/*                     81-    !   EVTFIL structure            ! */
/*                            --------------------------------- */



/*         Common data: */

/*                             5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                            --------------------------------- */
/*                          4 !   CRT number                  ! */
/*                            --------------------------------- */
/*                          5 !   printer number              ! */
/*                            --------------------------------- */
/*                          6 !   PRTQUE packet type          ! */
/*                            --------------------------------- */
/*                          7 !   PRTQUE packet sub-type      ! */
/*                            --------------------------------- */
/*                          8 !M!L!K!J!I!H!   G   !F!E!D!C!B!A! */
/*                            --------------------------------- */
/*                      9, 10 !   cookie                      ! */
/*                            --------------------------------- */
/*                         11 !   remote state flags          ! */
/*                            --------------------------------- */
/*                         12 !   prtque flags 2              ! */
/*                            --------------------------------- */
/*                         13 !   remote state flags 2        ! */
/*                            --------------------------------- */
/*                     14, 24 !   spare                       ! */
/*                            --------------------------------- */


#if	!defined(USE_DERIVED_TYPE)

/* equivalences */

/*       equivalence  (ALMEVTBUF,PRQBUF(81)) */
/*       integer*2     PRQBUF(PRQSZ) */

/*       integer*2     PRQFP, PRQCRT, PRQLPT, PRQBIAS, PRQEBIAS, PRQTYPE, PRQCATEGORY */
/*       integer*2     PRQSUBTYP, PRQPRIORITY, PRQAREA, PRQFLAG, PRQSTAFLG, PRQFLAG2, PRQSTAFLG2 */
/*       integer*4     PRQTIME(2) */
/*       integer*4     PRQETIME(2) */
/*       integer*4	    PRQCOK, PRQHOLDERID */
/*       character     PRQRSN$*(ALMEVTACCRSN_SZ) */
/*       equivalence  (PRQFP      ,PRQBUF(3)) */
/*       equivalence  (PRQCRT     ,PRQBUF(4)) */
#define	PRQCRT_REMOTE	-1 /* the event came from a remote CRT, don't use the stn number */
/*       equivalence  (PRQLPT     ,PRQBUF(5)) */
/*       equivalence  (PRQTYPE    ,PRQBUF(6)) */
/*       equivalence  (PRQSUBTYP  ,PRQBUF(7)) */
/*       equivalence  (PRQBIAS    ,ALMEVTBUF(ALMEVTXBIAS)) */
/*       equivalence  (PRQEBIAS    ,ALMEVTBUF(ALMEVTXEBIAS)) */
/*       equivalence  (PRQTIME    ,ALMEVTBUF(ALMEVTXTIME)) */
/*       equivalence  (PRQETIME   ,ALMEVTBUF(ALMEVTXETIME)) */
/*       equivalence  (PRQPRIORITY,ALMEVTBUF(ALMEVTXPRI)) */
/*       equivalence  (PRQFLAG    ,PRQBUF(8)) */
/*       equivalence  (PRQCOK     ,PRQBUF(9)) */
/*       equivalence  (PRQAREA    ,ALMEVTBUF(ALMEVTXACD)) */
/*       equivalence  (PRQSTAFLG  ,PRQBUF(11)) */
/*       equivalence  (PRQFLAG2   ,PRQBUF(12)) */
/*       equivalence  (PRQSTAFLG2 ,PRQBUF(13)) */
/*       equivalence (PRQCATEGORY, ALMEVTBUF(ALMEVTXCAT)) */
#endif	

/*				Frame Priorities */

#define	PRQFP_FREE	PRQ_FREE
#define	PRQFP_FIRE	PRQ_FIRE
#define	PRQFP_ALM	PRQ_ALARM
#define	PRQFP_RPT	PRQ_FILE



/*                               PRTQUE packet type */

#define	PRQTYPE_EVENT	0  /*  event */
#define	PRQTYPE_PLIMIT_ALM	1  /*  point limit alarm */
#define	PRQTYPE_PSTATUS_ALM	2  /*  point status alarm */
#define	PRQTYPE_PCONTROL_ALM	3  /*  point control alarm */
#define	PRQTYPE_DELAY	4  /*  delay */
#define	PRQTYPE_DRIVE_FAULT	5  /*  drive fault */
#define	PRQTYPE_ACCESS_ALM	6  /*  access alarm */
/*     integer(2),parameter:: PRQTYPE_ACCESS_STATE_ALM = 7  ;* access state alarm */
#define	PRQTYPE_NOTIFICATION	8  /*  notification */
#define	PRQTYPE_MSG_ALM	9  /*  general message alarm */
#define	PRQTYPE_COMMS_ALM	10 /*  communications alarm */
#define	PRQTYPE_AAT_CHANGE	11 /*  area assignment table changed */
#define	PRQTYPE_PURE_TEXT	12 /*  pure text message */
#define	PRQTYPE_FUNCTION	13 /*  function request */
#define	PRQTYPE_GEN_LATCHED_ALM	14 /*  generic latched alarm */
#define	PRQTYPE_SOE	15 /*  sequence of event (full text supplied) */
#define	PRQTYPE_MSG	17 /*  message (full text supplied) */
#define	PRQTYPE_MSG_ACK	18 /*  message acknowledge (full text supplied - oper may be inserted) */
#define	PRQTYPE_MSG_CNF	19 /*  message confirmation (full text supplied - oper may be inserted) */
#define	PRQTYPE_ALM_ACK	20 /*  alarm acknowledge (full text supplied - oper may be inserted) */
#define	PRQTYPE_ALM_RSP	21 /*  alarm response (full text supplied - oper may be inserted) */
#define	PRQTYPE_ALM_RST	22 /*  alarm reset (full text supplied - oper may be inserted) */
#define	PRQTYPE_API_NOTIF	23 /*  api notification (full text supplied - oper may be inserted, can be alarm, SOE, or message dependent on category) */
#define	PRQTYPE_NOTIF_COMMS	24 /*  communications alarm from GDA (ie. point server controller points) */
#define	PRQTYPE_NOTIF_NONPNT	25 /*  non point alarm */
#define	PRQTYPE_GEN_NONLATCHED_ALM	26 /*   generic nonlatched alarm */



/*				************************* */
/*				* PRTQUE packet subtype * */
/*				************************* */

/*                                    PRQTYPE_EVENT */

#define	PRQSUBTYP_DFD	0 /*  dfd */
#define	PRQSUBTYP_TEXT	1 /*  text */

#define	EVTSUB_ACTOR	1 /*  event subtype to not overwrite what is in the actor field */



/*			          PRQTYPE_PLIMIT_ALM */

/*     see DAT000_DEF ANA alarms */


/*				  PRQTYPE_PSTATUS_ALM */

/*     Note: For STAALM, (Status point alarms) the PRQSUBTYPE will be calculated from the value of the status point. */
/*           The alarm type in the point will still be those documented in DAT000_DEF STA alarms */
#define	PRQSUBTYP_STATE0	16   /*  state 0 */
/*     integer(2),parameter:: PRQSUBTYP_STATE1 - 15   = 17 - 31   ;* reserved for state 1 to 15 */



/*			          PRQTYPE_CONTROL_ALM */

#define	PRQSUBTYP_FAIL	0 /*  fail */
#define	PRQSUBTYP_AUTHORISED	1 /*  authorised */
#define	PRQSUBTYP_EXT_CHANGE	2 /*  external cahnge */
#define	PRQSUBTYP_CMD_DISAGREE	3 /*  command disagree (tdc) */


/*				   PRQTYPE_DELAY */

/*     type  4: 0 - invalid */
/*	       1 - delay */
/*	       2 - delay */
/*	       3 - delay */
/*	       4 - delay */
/*	       5 - delay */
/*	       6 - invalid */
/*	       7 - feed */


/*				  PRQTYPE_DRIVE_FAULT */
/*     type  5: 0 - fault */
/*              1 - fault */


/*				  PRQTYPE_NOTIFICATION */

/*     see notification.h (TPS-supplied include file for subtype codes) */


/*				  PRQTYPE_COMMS_ALM */

#define	PRQSUBTYP_FAIL_ALM	0 /*  fail alarm */
#define	PRQSUBTYP_DIAG_ALM	1 /*  diagnostic alarm */
#define	PRQSUBTYP_REDUNDANCY_ALM	2 /*  redundancy alarm */
#define	PRQSUBTYP_NOTCLI_ALM	3 /*  notification client alarm */
#define	PRQSUBTYP_MSLINKD_ALM	4 /*  MultiServer link daemon connection fail */
#define	PRQSUBTYP_MSDATOVL_ALM	5 /*  MultiServer data server overload */
#define	PRQSUBTYP_MSNOTOVL_ALM	6 /*  MultiServer notification server overload */
#define	PRQSUBTYP_MSDATCON_ALM	7 /*  MultiServer data connection fail */
#define	PRQSUBTYP_MSNOTCON_ALM	8 /*  MultiServer notification connection fail */
#define	PRQSUBTYP_MARG_ALM	9 /*  marginal alarm */
#define	PRQSUBTYP_MSTAGERR_ALM	10 /*  MultiServer tag synching error alarm */




/*				    PRQTYPE_FUNCTION */

#define	PRQSUBTYP_DISABLE_SYSTEM	1  /*  disable system alarms function */
#define	PRQSUBTYP_DISABLE_AREA	2  /*  disable area alarms function */
#define	PRQSUBTYP_DISABLE_EE	3  /*  disable EE alarms function */
#define	PRQSUBTYP_DISABLE_POINT	4  /*  disable point alarms function */
#define	PRQSUBTYP_RECOVERY_BEGIN	5  /*  TPS recovery begin function */
#define	PRQSUBTYP_RECOVERY_END	6  /*  TPS recover end */
#define	PRQSUBTYP_DEL_PNT	7  /*  delete alarms associated with point */
#define	PRQSUBTYP_GDA_REC_BEGIN	8  /*  GDA recovery begin (for both area and asset based recoveries) */
#define	PRQSUBTYP_GDA_REC_END	9  /*  GDA recovery end (for both area and asset based recoveries) */
#define	PRQSUBTYP_PNT_REC_BEGIN	10 /*  point recovery begin */
#define	PRQSUBTYP_PNT_REC_END	11 /*  point recovery end */
#define	PRQSUBTYP_BB_REC_BEGIN	12 /*  BB recovery begin */
#define	PRQSUBTYP_BB_REC_END	13 /*  BB recovery end */
#define	PRQSUBTYP_DISABLE_BB	14 /*  disable BB alarms */
#define	PRQSUBTYP_CHANGE_QUALITY	15 /*  change quality of all alarms with the specified criteria */
/*     16 spare */
/*     17 spare */
#define	PRQSUBTYP_SILENCE	18 /*  Silence request from GDA (pointserver (TPN)) */
#define	PRQSUBTYP_DISABLE_CON	19 /*  Disable alarms on a connection */
#define	PRQSUBTYP_VALIDATE_ALMMSG	20 /*  Validate area of alarms and messages */


/*				  PRQTYPE_GEN_LATCHED_ALM */

#define	PRQSUBTYP_REMSRV_CNCT_ALM	0  /*  remote server connection fail alarm (NOT USED) */
#define	PRQSUBTYP_REMSRV_AREA_ALM	1  /*  remote server area fail alarm */
#define	PRQSUBTYP_DUPLICATE_PNT_ALM	2  /*  duplicate point alarm */
#define	PRQSUBTYP_SCRIPTING_ALM	3  /*  server scripting engine timeout/error alarm */
#define	PRQSUBTYP_EVARCH_ALM	4  /*  event archiving alarm */
#define	PRQSUBTYP_REMSRV_ALMDSB_ALM	5  /*  Remote Server Alarm Disabled Server-wide */
#define	PRQSUBTYP_DIRECTSTN_ALM	6  /*  Direct Station alarm */
#define	PRQSUBTYP_DSACKSYNC_ALM	7  /*  Direct Station Acknowledgement Synchronisation alarm */
#define	PRQSUBTYP_ESIG_DISABLE	8  /*  electronic signature disable by area alarm */
#define	PRQSUBTYP_FILE_REP	9  /*  file replication */
#define	PRQSUBTYP_XLS_LANIF_ALM	10 /*  XLS LAN Interface failure alarm */
#define	PRQSUBTYP_OPCI_ALM	11 /*  OPC Integrator group failure alarm */
#define	PRQSUBTYP_ARCHIV_ALM	12 /*  history archiving alarm */
#define	PRQSUBTYP_CONSOLE_FAIL_ALM	13 /*  Console Failed Alarm */
#define	PRQSUBTYP_CONSOLE_MARGINAL_ALM	14 /*  Console Marginal Alarm */
#define	PRQSUBTYP_PRINTER_ALM	16 /*  Printer Alarm */
#define	PRQSUBTYP_DIRECTSTN_CLIENT_ALM	17  /*  Direct Station Extension alarm */


/*				  PRQTYPE_GEN_NONLATCHED_ALM */

#define	PRQSUBTYP_GENERIC	0
#define	PRQSUBTYP_STATION_LOGIN_ALM	1 /*  Station Login Alarm */
#define	PRQSUBTYP_STATION_FAIL_ALM	2 /*  Station Failure Alarm */
#define	PRQSUBTYP_PRINTER_HIGHPRI_ALM	3 /*  Printer Alarm */


/*				************ */
/*				* Priority * */
/*				************ */

#define	PRQPRI_MASK	0x00F0	
#define	PRQPRI_OFFSET	4
#define	PRQPRI_WIDTH	4
#define	PRQSUBPRI_MASK	0x000F	
#define	PRQSUBPRI_WIDTH	4
#define	PRQPRI_SIMPLE_MASK	0x0030	
#define	PRQSUBPRI_OFFSET	0

#define	PRQPRI_LOG	0  /*  log only alarms */
#define	PRQPRI_LOW	1  /*  low priority alarms */
#define	PRQPRI_HIGH	2  /*  high priroity alarms */
#define	PRQPRI_URGENT	3  /*  urgent priority alarms */
#define	PRQPRI_DELAYS	4  /*  delays */
#define	PRQPRI_DRIVE_FAULT	5  /*  drive faults */
#define	PRQPRI_OP_CHANGE	6  /*  operator changes */
#define	PRQPRI_REM_OP_CHANGE	7  /*  remote operator changes */
#define	PRQPRI_NONE	8  /*  no priority (used by CDA) */
#define	PRQPRI_LOW_MSG	13 /*  low priority messages */
#define	PRQPRI_HIGH_MSG	14 /*  high priority messages */
#define	PRQPRI_URGENT_MSG	15 /*  urgent priority messages */

#define	PRQSUBPRI_MIN	0  /*  lowest sub-priority */
#define	PRQSUBPRI_MAX	15 /*  highest sub-priority */


/*                               *********** */
/*                               * flags 1 * */
/*                               *********** */

/*                               A - alarm return to normal */
#define	PRQ_ALARM_RTN_MASK	0x0001	 /*  field mask */
#define	PRQ_ALARM_RTN	0x0001	 /*  alarm returned to normal */
#define	PRQ_ALARM_RTN_BIT	0       /*  bit position */

/*				B - auto return to normal */
#define	PRQ_AUTO_RTN_MASK	0x0002	 /*  field mask */
#define	PRQ_AUTO_RTN	0x0002	 /*  alarm is automatically rtn */
#define	PRQ_AUTO_RTN_BIT	1       /*  bit position */

/*				C - significant change alarm */
#define	PRQ_SIG_CHG_MASK	0x0004	 /*  field mask */
#define	PRQ_SIG_CHG	0x0004	 /*  alarm is a significant change alarm */
#define	PRQ_SIG_CHG_BIT	2       /*  bit position */

/*				D - suppress event reporting */
#define	PRQ_SPRS_EVT_MASK	0x0008	 /*  field mask */
#define	PRQ_SPRS_EVT	0x0008	 /*  PRTQUE packet is not an event */
#define	PRQ_SPRS_EVT_BIT	3       /*  bit position */

/*				E - override with log priority */
#define	PRQ_LOG_OVERRIDE_MASK	0x0010	 /*  field mask */
#define	PRQ_LOG_OVERRIDE	0x0010	 /*  Priority will be overwritten to log */
#define	PRQ_LOG_OVERRIDE_BIT	4       /*  bit position */

/*				F - notification from remote server */
#define	PRQ_REMOTE_MASK	0x0020	 /*  field mask */
#define	PRQ_REMOTE	0x0020	 /*   notification from a remote server */
#define	PRQ_REMOTE_BIT	5       /*  bit position */

/*				G - notification type from remote server */
#define	PRQ_REMOTE_TYPE_MASK	0x03C0	 /*  field mask */
#define	PRQ_REMOTE_TYPE_OFFSET	6	  /*  field offset */
#define	PRQ_REMOTE_TYPE_WIDTH	4	  /*  field width */
#define	PRQ_REMOTE_TYPE_ADD	0x0000	 /*  add a notification from a remote server */
#define	PRQ_REMOTE_TYPE_DEL	0x0040	 /*  delete a notification from a remote server */
#define	PRQ_REMOTE_TYPE_CHG	0x0080	 /*  change a notification from a remote server */
#define	PRQ_REMOTE_TYPE_REC	0x00C0	 /*  recover a notification from a remote server */
#define	PRQ_REMOTE_TYPE_OPC	0x0100	 /*  handle a notification from an OPC server */
#define	PRQ_REMOTE_TYPE_SLAP	0x0200	 /*  slap a notification from a remote server */

/*				H - Associated DVM Video Clip */
#define	PRQ_DVM_LINK_MASK	0x0400	 /*  field mask */
#define	PRQ_DVM_LINK	0x0400	 /*  Indicate DVM Clip link */
#define	PRQ_DVM_LINK_BIT	10      /*  bit position */

/*                               I - Prohibit descriptor from overwritten */
#define	PRQ_ALARM_DESC_MASK	0x0800	 /*  field mask */
#define	PRQ_ALARM_DESC	0x0800	 /*  supply prmgr with description */
#define	PRQDES_OFFSET	11
#define	PRQDES_WIDTH	1

/*				J - JournalOnly */
#define	PRQ_JNL_ONLY_MASK	0x1000	 /*  mask */
#define	PRQ_JNL_ONLY	0x1000	 /*  Journal only alarm */
#define	PRQ_JNL_ONLY_BIT	12      /*  bit position */

/*				K - Contact Cutout */
#define	PRQ_CONT_CUT_MASK	0x2000	 /*  mask */
#define	PRQ_CONT_CUT	0x2000	 /*  contact cutout */
#define	PRQ_CONT_CUT_BIT	13      /*  bit position */

/*				L- Alarm for Local Server Only */
#define	PRQ_LOCAL_ALM_MASK	0x4000	 /*  Alarm Local only mask */
#define	PRQ_LOCAL_ALM	0x4000	 /*  Alarm Local only */
#define	PRQ_LOCAL_ALM_BIT	14      /*  bit position */

/*                               M- Event for journalling from a Console Station */
#define	PRQ_CSTN_EVT_MASK	0x8000	 /*  Console Station Event mask */
#define	PRQ_CSTN_EVT	0x8000	 /*  Console Station Event */
#define	PRQ_CSTN_EVT_BIT	15      /*  bit position */



/*                               *********** */
/*                               * flags 2 * */
/*                               *********** */

/*                               A - no ack sync for alarm */
#define	PRQ_ALM_NOACKSYNC_MASK	0x0001	 /*  field mask */
#define	PRQ_ALM_NOACKSYNC	0x0001	 /*  exclude alarm from ack sync */
#define	PRQ_ALM_NOACKSYNC_BIT	0       /*  bit position */

/*                               B - alarm is non-direct */
#define	PRQ_ALM_NONDIRECT_MASK	0x0002	 /*  field mask */
#define	PRQ_ALM_NONDIRECT	0x0002	 /*  alarm is non direct */
#define	PRQ_ALM_NONDIRECT_BIT	1       /*  bit position */

/*                               C - console station event should be journalled on the cluster server */
#define	PRQ_CSTN_JNL_MASK	0x0004	 /*  field mask */
#define	PRQ_CSTN_JNL	0x0004	 /*  console station event should be journalled on the cluster server */
#define	PRQ_CSTN_JNL_BIT	2       /*  bit position */

/*                               D - Recipe event recovery begin bracket event */
#define	PRQ_CR_RECOVERY_BRACKET_MASK	0x0008	 /*  field mask */
#define	PRQ_CR_RECOVERY_BRACKET	0x0008	 /*  Event is a recipe event recovery begin bracket event */
#define	PRQ_CR_RECOVERY_BRACKET_BIT	3       /*  bit position */

/*                               E - Control recipe complete event */
#define	PRQ_CR_COMPLETE_EVT_MASK	0x0010	 /*  field mask */
#define	PRQ_CR_COMPLETE_EVT	0x0010	 /*  Event is a control recipe complete event */
#define	PRQ_CR_COMPLETE_EVT_BIT	4       /*  bit position */

/*                               F - Recipe event is guaranteed to be delivered and journaled into the event DB */
#define	PRQ_CR_GUARANTEED_DELIVERY_MASK	0x0020	 /*  field mask */
#define	PRQ_CR_GUARANTEED_DELIVERY	0x0020	 /*  Event is guaranteed to be delivered and journaled into the event DB */
#define	PRQ_CR_GUARANTEED_DELIVERY_BIT	5       /*  bit position */

/*                               G - Event is indeed "Simple" -> "Condition", as required in ER6030 */
#define	PRQ_ALM_SIMPLE_TO_CONDITION_MASK	0x0040	 /*  field mask */
#define	PRQ_ALM_SIMPLE_TO_CONDITION	0x0040	 /*  Event is indeed a simple event */
#define	PRQ_ALM_SIMPLE_TO_CONDITION_BIT	6       /*  bit position */

/*                               H - ignore shelving state (set if alarm from pre-830 publisher or local ack enabled) */
#define	PRQ_ALM_IGNORE_SHELVE_STATE_MASK	0x0080	 /*  field mask */
#define	PRQ_ALM_IGNORE_SHELVE_STATE	0x0080	
#define	PRQ_ALM_IGNORE_SHELVE_STATE_BIT	7       /*  bit position */

/*                               I - alarm is unshelvable */
#define	PRQ_UNSHELVABLE_MASK	0x0100	 /*  field mask */
#define	PRQ_UNSHELVABLE	0x0100	 /*  unshelvable bit should be turned on for this alarm */
#define	PRQ_UNSHELVABLE_BIT	8       /*  bit position */

/*                               J - Alarm doesn't require acknowledgement */
#define	PRQ_ALM_ACK_NOT_REQUIRED_MASK	0x0200	 /*  field mask */
#define	PRQ_ALM_ACK_NOT_REQUIRED	0x0200	 /*  Alarm doesn't require acknowledgement */
#define	PRQ_ALM_ACK_NOT_REQUIRED_BIT	9       /*  bit position */




/*         Priority 1. EVENT packet (dfd). */
/*                     Built, sent, timestamped by EVENT. */

/*                             5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                            --------------------------------- */
/*                         25 !         dfd type              ! */
/*                            --------------------------------- */
/*                         26 !         dfd subtype           ! */
/*                            --------------------------------- */
/*                         27 !         dfd pointer (acronym) ! (int4) */
/*                            --------------------------------- */
/*                         29 !         dfd pointer file      ! (int4) */
/*                            --------------------------------- */
/*                         31 !         dfd pointer word      ! (int4) */
/*                            --------------------------------- */
/*                         33 !         dfd pointer range     ! (int4) */
/*                            --------------------------------- */
/*                         35 !         dfd pointer length    ! */
/*                            --------------------------------- */
/*                         36 !         -                     ! */
/*                            --------------------------------- */
/*                         37 !  file number      point       ! (int4) */
/*                            --------------------------------- */
/*                         39 !  record number    parameter   ! (int4) */
/*                            --------------------------------- */
/*                         41 !  word number      offset      ! (int4) */
/*                            --------------------------------- */
/*                         43 !  bit number       -           ! */
/*                            --------------------------------- */
/*                         44 !  field width      -           ! */
/*                            --------------------------------- */
/*                      45-60 !          old value            ! */
/*                            --------------------------------- */
/*                      61-76 !          new value            ! */
/*                            --------------------------------- */
/*                      77-80 !    operatorID or stationID    ! */
/*                            --------------------------------- */
/*                      81-   ! EVTFIL structure              ! */
/*                            --------------------------------- */

#define	EVTBF_SZ	16  /*  size of ascii event buffers (words) */
#if	!defined(USE_DERIVED_TYPE)

/* equivalences */

/*       integer*2    EVTDFD, EVTSUB */
/*       integer*4    EVTPTR, EVTPFL, EVTPWD, EVTPRG */
/*       integer*2    EVTPLN */
/*       integer*4    EVTFIL, EVTREC, EVTWRD */
/*       integer*2    EVTBIT, EVTWID */
/*       double precision EVTOLD              ;* for old numeric value */
/*       double precision EVTNEW              ;* for new numeric value */
/*       integer*2    EVTBF1(EVTBF_SZ)       ;* for old ascii value */
/*       integer*2    EVTBF2(EVTBF_SZ)       ;* for new ascii value */
/*       equivalence (EVTDFD , PRQBUF(25)) */
/*       equivalence (EVTSUB , PRQBUF(26)) */
/*       equivalence (EVTPTR , PRQBUF(27)) */
/*       equivalence (EVTPFL , PRQBUF(29)) */
/*       equivalence (EVTPWD , PRQBUF(31)) */
/*       equivalence (EVTPRG , PRQBUF(33)) */
/*       equivalence (EVTPLN , PRQBUF(35)) */
/*       equivalence (EVTFIL , PRQBUF(37)) */
/*       equivalence (EVTREC , PRQBUF(39)) */
/*       equivalence (EVTWRD , PRQBUF(41)) */
/*       equivalence (EVTBIT , PRQBUF(43)) */
/*       equivalence (EVTWID , PRQBUF(44)) */
/*       equivalence (EVTOLD , PRQBUF(45)) */
/*       equivalence (EVTNEW , PRQBUF(61)) */
/*       equivalence (EVTBF1 , PRQBUF(45)) */
/*       equivalence (EVTBF2 , PRQBUF(61)) */
#endif	



/*         Priority 1. EVENT packet (text). */
/*                     Built, sent, timestamped by EVTMSG. */

/*                             5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                            --------------------------------- */
/*                         25 !  dfd type    = ASCDFD         ! */
/*                            --------------------------------- */
/*                         26 !  dfd subtype = 0              ! */
/*                            --------------------------------- */
/*                         27 !  dfd pointer = 0              ! (int4) */
/*                            --------------------------------- */
/*                         29 !  dfd pointer file  = 0        ! (int4) */
/*                            --------------------------------- */
/*                         31 !  dfd pointer word  = 0        ! (int4) */
/*                            --------------------------------- */
/*                         33 !  dfd pointer range = 0        ! (int4) */
/*                            --------------------------------- */
/*                         35 !  dfd pointer length= 0        ! */
/*                            --------------------------------- */
/*                         36 !         -                     ! */
/*                            --------------------------------- */
/*                         37 !  file number                  ! (int4) */
/*                            --------------------------------- */
/*                         39 !  record number                ! (int4) */
/*                            --------------------------------- */
/*                         41 !  word number                  ! (int4) */
/*                            --------------------------------- */
/*                         43 !  bit number  = 0              ! */
/*                            --------------------------------- */
/*                         44 !  field width = 0              ! */
/*                            --------------------------------- */
/*                      45-80 !  spare                        ! */
/*                            --------------------------------- */
/*                      81-   ! EVTFIL structure              ! */
/*                            --------------------------------- */



/*         Priority 1. ALARM packet. */
/*                     Built by user, sent and timestamped by ALARM. */

/*                             5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                            --------------------------------- */
/*                      25-28 ! from/old/limit value          ! (dble) */
/*                            --------------------------------- */
/*                      29-32 ! to/new/current value          ! (dble) */
/*                            --------------------------------- */
/*                      33-37 !      alarm type specific      ! */
/*                            --------------------------------- */

/*                            point alarms: (see DAQQUE and CNTQUE) */
/*                                     33 - point number */
/*                                     34 - point parameter */
/*                            communications alarm: */
/*                                     33 - channel number */
/*				      34 - rtu number */
/*                            redundancy comms alarm: */
/*				      33 - type */
#define	PNT_VER_ALM	1	/*  redundant database version alarm */
#define	PNT_LINK_ALM	2	/*  redundant link alarm */
#define	PNT_QUE_ALM	3	/*  redundant queue alarm */
#define	PNT_BACKUP_ALM	4	/*  backup server offline alarm */
#define	PNT_LINK0_ALM	5	/*  redundant link0 alarm */
#define	PNT_LINK1_ALM	6	/*  redundant link1 alarm */

/*			     TPS alarms: */
/*				      33 - point number */
/*				      34 - param number */
/*				   35,36 - BB number */
/*				      37 - EE number */
/*			     Generic Latched alarms: */
/*				      33 - =0 */
/*				      34 - subtype specific unique parameter */
/*                            --------------------------------- */
/*                         38 ! Controller specific alm data  ! */
/*                            --------------------------------- */
/*                      39-42 ! oldest time of alarm          ! - used by single line alarm presentation */
/*                            --------------------------------- */
/*                      43    ! oldest time bias              ! - used by single line alarm presentation */
/*                            --------------------------------- */
/*                      44    ! count                         ! - used by single line alarm presentation */
/*                            --------------------------------- */
/*                      45    ! parent point number           ! - used by remote alarms only */
/*                            --------------------------------- */
/*                      46    ! unacknowleged timeout         ! - minutes */
/*                            --------------------------------- */
/*                      47    ! original area                 ! - used by 840 only */
/*                            --------------------------------- */
/*                      48    ! original parent               ! - used by 840 only */
/*                            --------------------------------- */
/*                      49-52 ! alarm shelve time             ! */
/*                            --------------------------------- */
/*                      53-56 ! alarm expire time             ! */
/*                            --------------------------------- */
/*                      57    ! alarm expire time bias        ! */
/*                            --------------------------------- */
/*                      58-80 ! spare                         ! */
/*                            --------------------------------- */
/*                      81-   ! EVTFIL structure              ! */
/*                            --------------------------------- */


#if	!defined(USE_DERIVED_TYPE)

/* equivalences */

/*       integer*2    ALMPNT, ALMPAR, ALMEE,  ALMCTRL, ALMCOUNT, ALMOLDBIAS, ALMPARENT, ALMUACKTOUT, ORGAREA, ORGPARENT, ALMEXPIREBIAS */
/*       integer*4    ALMFTL, ALMFTH, ALMBB, ALMOLDTIME(2), ALMEXPIRETIME(2), ALMSHELVETIME(2) */
/*       double precision ALMLIM ,ALMVAL */
/*       equivalence (ALMLIM ,PRQBUF(25)) */
/*       equivalence (ALMVAL ,PRQBUF(29)) */
/*       equivalence (ALMPNT ,PRQBUF(33)) */
/*       equivalence (ALMPAR ,PRQBUF(34)) */
/*       equivalence (ALMBB  ,PRQBUF(35)) */
/*       equivalence (ALMEE  ,PRQBUF(37)) */
/*       equivalence (ALMCTRL,PRQBUF(38)) */
/*       equivalence (ALMOLDTIME ,PRQBUF(39)) */
/*       equivalence (ALMOLDBIAS ,PRQBUF(43)) */
/*       equivalence (ALMCOUNT ,PRQBUF(44)) */
/*       equivalence (ALMPARENT,PRQBUF(45)) */
/*       equivalence (ALMUACKTOUT,PRQBUF(46)) */
/*       equivalence (ORGAREA,PRQBUF(47)) */
/*       equivalence (ORGPARENT,PRQBUF(48)) */
/*       equivalence (ALMSHELVETIME,PRQBUF(49)) */
/*       equivalence (ALMEXPIRETIME,PRQBUF(53)) */
/*       equivalence (ALMEXPIREBIAS,PRQBUF(57)) */
#endif	



/*         Priority 1. Function Request */

/*                             5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                            --------------------------------- */
/*			  25 ! function specific parameter 1 ! */
/*			     --------------------------------- */

/*				disable system     - 0 */
/*				disable area	   - areanumber */
/*				disable EE	   - EE code */
/*				disable point 	   - point number */
/*				TPS recovery begin - EE code */
/*				TPS recovery end   - EE code */



/*                            --------------------------------- */
/*                      26    ! function specific parameter 2 ! */
/*                            --------------------------------- */
/*                      27-28 !    completion event handle    ! */
/*                            --------------------------------- */
/*                      29-30 ! function parameter 3  (int4)  ! */
/*                            --------------------------------- */
/*                         31 ! function parameter 4          ! */
/*                            --------------------------------- */
/*                         32 ! function parameter 5          ! */
/*                            --------------------------------- */
/*                         33 ! function parameter 6          ! */
/*                            --------------------------------- */
/*                         34 ! function parameter 7          ! */
/*                            --------------------------------- */
/*			    Quality Changes */
/*			    function parameter 1: if <>0, system change */
/*			    function parameter 2: connection */
/*			    function parameter 3: BB/SCADA Controller */
/*			    function parameter 4: EE/SCADA Channel */
/*			    function parameter 5: point */
/*			    function parameter 6: param */
/*			    function parameter 7: quality */

/*                            --------------------------------- */
/*                      35-80 !             spare             ! */
/*                            --------------------------------- */
/*                      81-   ! EVTFIL structure              ! */
/*                            --------------------------------- */


#if	!defined(USE_DERIVED_TYPE)

/* equivalences */

/*       integer*2    FNPAR1, FNPAR2, FNPAR4, FNPAR5, FNPAR6, FNPAR7 */
/*       integer*4    EVTHANDLE,FNPAR3,FNPAR_RECID(2) */
/*       equivalence (FNPAR1       ,PRQBUF(25)) */
/*       equivalence (FNPAR2       ,PRQBUF(26)) */
/*       equivalence (EVTHANDLE    ,PRQBUF(27)) */
/*       equivalence (FNPAR3       ,PRQBUF(29)) */
/*       equivalence (FNPAR4       ,PRQBUF(31)) */
/*       equivalence (FNPAR5       ,PRQBUF(32)) */
/*       equivalence (FNPAR6       ,PRQBUF(33)) */
/*       equivalence (FNPAR7       ,PRQBUF(34)) */
/*       equivalence (FNPAR_RECID  ,PRQBUF(25)) */
#endif	



/*         Priority 1. Message */

/*                             5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                            --------------------------------- */
/*		       25-80 !	msgdir buffer	    	     ! */
/*                            --------------------------------- */
/*                      81-   ! EVTFIL structure              ! */
/*                            --------------------------------- */


#if	!defined(USE_DERIVED_TYPE)

/* equivalences */

/*       integer*2    PRQMSGBUF(MSGDSZ) */
/*       equivalence (PRQMSGBUF    ,PRQBUF(25)) */
#endif	



/*         Priority 1. Event - Pure Text */

/*                             5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                            --------------------------------- */
/*		       25-80 !		   spare	     ! */
/*                            --------------------------------- */
/*                      81-   ! EVTFIL structure              ! */
/*                            --------------------------------- */



/*         Priority 2.  REPORT packet. */
/*                      Built ,sent and timestamped by PRSEND. */

/*                             5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                            --------------------------------- */
/*                      25-88 !   128 character file name     ! */
/*                            --------------------------------- */
#define	PRQNAM_SZ	128
#if	!defined(USE_DERIVED_TYPE)

/* equivalences */

/*       integer*2     PRQNAM(PRQNAM_SZ/2) */
/*       equivalence   (PRQNAM ,PRQBUF(25)) */
#endif	



/*       type    prtque_event */
/*          sequence */
/*          integer*2  evtdfd */
/*          integer*2  evtsub */
/*          integer*4  evtptr */
/*          integer*4  evtpfl */
/*          integer*4  evtpwd */
/*          integer*4  evtprg */
/*          integer*2  evtpln */
/*          integer*2  spare34 */
/*          integer*4  evtfil */
/*          integer*4  evtrec */
/*          integer*4  evtwrd */
/*          integer*2  evtbit */
/*          integer*2  evtwid */
/*          union */
/*             map */
/*             integer*2  evtbf1(EVTBF_SZ) */
/*             end map */
/*             map */
/*             real*8  evtold */
/*             end map */
/*          end union */
/*          union */
/*             map */
/*             integer*2  evtbf2(EVTBF_SZ) */
/*             end map */
/*             map */
/*             real*8  evtnew */
/*             end map */
/*          end union */
/*          integer*2  spare2(4) */
/*          type(almevtfil) event */
/*       end type prtque_event */

/*       type prtque_event_text */
/*       sequence */
/*          integer*2  evtdfd */
/*          integer*2  evtsub */
/*          integer*4  evtptr */
/*          integer*4  evtpfl */
/*          integer*4  evtpwd */
/*          integer*4  evtprg */
/*          integer*2  evtpln */
/*          integer*2  spare34 */
/*          integer*4  evtfil */
/*          integer*4  evtrec */
/*          integer*4  evtwrd */
/*          integer*2  evtbit */
/*          integer*2  evtwid */
/*          integer*2  spare(36) */
/*          type(almevtfil) event */
/*       end type prtque_event_text */


/*       type prtque_alarm */
/*       sequence */
/*          real*8     almlim */
/*          real*8     almval */
/*          integer*2  almpnt */
/*          integer*2  almpar */
/*          integer*4  almbb */
/*          integer*2  almee */
/*          integer*2  almctrl */
/*          integer*4  almoldtime(2) */
/*          integer*2  almoldbias */
/*          integer*2  almcount */
/*          integer*2  almparent */
/*          integer*2  almuacktout */
/*          integer*2  almorgarea */
/*          integer*2  almorgparent */
/*          integer*4  almshelvetime(2) */
/*          integer*4  almexpiretime(2) */
/*          integer*2  almexpirebias */
/*          integer*2  spare(23) */
/*          type(almevtfil) event */
/*       end type prtque_alarm */


/*       type prtque_message */
/*       sequence */
/*          type(t_msgdir) msgdir */
/*          integer*2  spare(56-MSGDSZ) */
/*          type(almevtfil) event */
/*       end type prtque_message */

/*       type prtque_function */
/*       sequence */
/*          integer*2  fnpar1 */
/*          integer*2  fnpar2 */
/*          integer*4  hEvent */
/*          integer*4  fnpar3 */
/*          integer*2  fnpar4 */
/*          integer*2  fnpar5 */
/*          integer*2  fnpar6 */
/*          integer*2  fnpar7 */
/*          integer*2  spare(46) */
/*          type(almevtfil) event */
/*       end type prtque_function */

/*       type prtque_file */
/*       sequence */
/*          integer*2  prqnam(PRQNAM_SZ/2) */
/*       end type prtque_file */

/*       type t_prtque */
/*       sequence */
/*          integer*2  prqnxt(2) */
/*          integer*2  prqlck */
/*          integer*2  prqcrt */
/*          integer*2  prqlpt */
/*          integer*2  prqtype */
/*          integer*2  prqsubtyp */
/*          integer*2  prqflag */
/*          integer*2  prqcookie(2) */
/*          integer*2  prqstateflag */
/*          integer*2  prqflag2 */
/*          integer*2  prqstateflag2 */
/*          integer*2  spare(11) */
/*          union */
/*              map */
/*              type(prtque_event)  event */
/*              end map */
/*              map */
/*              type(prtque_event_text) event_text */
/*              end map */
/*              map */
/*              type(prtque_alarm)  alarm */
/*              end map */
/*              map */
/*              type(prtque_file)   file */
/*              end map */
/*              map */
/*              type(prtque_message)   message */
/*              end map */
/*              map */
/*              type(prtque_function)  function */
/*              end map */
/*          end union */
/*       end type t_prtque */

#if	!defined(USE_DERIVED_TYPE)

/* equivalences */

/*       type(t_prtque) PRQSTRUCT */
/*       equivalence  (PRQSTRUCT,PRQBUF(1)) */
#endif	





#include "src/evtfil_def"

struct    prtque_event
{
    int2  evtdfd;
    int2  evtsub;
    int4  evtptr;
    int4  evtpfl;
    int4  evtpwd;
    int4  evtprg;
    int2  evtpln;
    int2  spare34;
    int4  evtfil;
    int4  evtrec;
    int4  evtwrd;
    int2  evtbit;
    int2  evtwid;
    union {
      int2  evtold[DBLE_SZ];
      int2  evtbf1[EVTBF_SZ];
      } oldval;
    union {
      int2  evtnew[DBLE_SZ];
      int2  evtbf2[EVTBF_SZ];
      } newval;
    int2  spare2[4];
    struct almevtfil event;
};

struct    prtque_event_text
{
    int2  evtdfd;
    int2  evtsub;
    int4  evtptr;
    int4  evtpfl;
    int4  evtpwd;
    int4  evtprg;
    int2  evtpln;
    int2  spare34;
    int4  evtfil;
    int4  evtrec;
    int4  evtwrd;
    int2  evtbit;
    int2  evtwid;
    int2  spare[36];
    struct almevtfil event;
};

struct    prtque_alarm
{
    int2     almlim[DBLE_SZ];
    int2     almval[DBLE_SZ];
    int2     almpnt;
    int2     almpar;
    int4     almbb;
    int2     almee;
    int2     almctrl;
    HSCTIME  almoldtime;
    int2     almoldbias;
    int2     almcount;
    int2     almparent;
    int2     almuacktout;
    int2     almorgarea;
    int2     almorgparent;
    HSCTIME  almshelvetime;
    HSCTIME  almexpiretime;
    int2     almexpirebias;
    int2     spare[23];
    struct almevtfil event;
};

struct    prtque_message
{
    struct msgdir msgbuf;
    int2 spare[56-MSGDSZ];
    struct almevtfil event;
};

struct    prtque_function
{
    int2  fnpar1;
    int2  fnpar2;
    int4  hEvent;
    int4  fnpar3;
    int2  fnpar4;
    int2  fnpar5;
    int2  fnpar6;
    int2  fnpar7;
    int2  spare[46];
    struct almevtfil event;
};

struct    prtque_file
{
    int2  prqnam[PRQNAM_SZ/2];
};


struct    prtque
{
    int2  prqnxt[2];
    int2  prqlck;
    int2  prqcrt;
    int2  prqlpt;
    int2  prqtype;
    int2  prqsubtyp;
    int2  prqflag;
    int2  prqcookie[2];
    int2  prqstateflag;
    int2  prqflag2;
    int2  prqstateflag2;
    int2  spare[11];
    union
    {
        struct prtque_event 		event;
        struct prtque_event_text 	event_text;
        struct prtque_alarm 		alarm;
        struct prtque_file 		file;
	  struct prtque_message 	message;
	  struct prtque_function	function;
    } type;
};




#endif	
#endif	

