
/*                             CNTQUE - control request queue */
/*                             ------------------------------ */

/*     SCCS REVISION: */
/*         @(#)cntque_def,v	830.1 */


#if	!defined(CNQSZ)
/*       integer*2      CNQSZ */
#define	CNQSZ	24			/*  must be multiple of 12 */
/* 					;* multiple of 4 for double allignment */
/* 					;* multiple of 6 for page 10 repeats */
#if	!defined( inside_IDL )

/*         CNTQUE has a queue structure. There is one header per task */
/*         lrn plus one free queue, each of length 6 words as follows. */
/*         The next record after the headers is the first data record. */

/*                 word 1,2 - head pointer */
/*                      3,4 - tail pointer */
/*                        5 - lock */
/*                        6 - length counter */

/*         Other records: */
/*                              5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                             --------------------------------- */
/*                         1,2 !    pointer to next frame      ! */
/*                             --------------------------------- */
/*                           3 !    frame priotity (task LRN)  ! */
/*                             --------------------------------- */
/*                           4 !        control timer          ! */
/*                             --------------------------------- */
/*                           5 !    point type/number          ! */
/*                             --------------------------------- */
/*                           6 !    point parameter            ! */
/*                             --------------------------------- */
/*                        7-11 !       address packet          ! */
/*                             --------------------------------- */
/*                          12 !    return lrn / error status  ! */
/*                             --------------------------------- */
/*                       13-16 !     target value (e.u or %)   ! */
/*                             --------------------------------- */
/*                       17-20 !     output value (normalized) ! */
/*                             --------------------------------- */
/*                       21-24 !     GDA error                 ! */
/*                             --------------------------------- */

/*        Note: For status point requests, the normalized value holds */
/*              the output value as Field_width*16 + output_value. */
/*              Widths are 1,3,or 7. */

/*              Lrn is filled in by pps/sps routines. */
/*              If bit 15 is on, then lrn is information only, */
/*              else the calling task expects a reply. */

/*       integer*2     CNQBUF(CNQSZ) */

/*       integer*2     CNTXTOV, CNTXPNT, CNTXPAR, CNTXADD  , CNTXLRN */
/*       integer*2     CNTXVAL, CNTXNRM, CNTXERR */
/*       integer*2     CNTTOV , CNTPNT , CNTPAR , CNTADD(5), CNTLRN */
/*       double precision CNTVAL, CNTNRM */
#define	CNTXTOV	4	
#define	CNTXPNT	5	
#define	CNTXPAR	6	
#define	CNTXADD	7	
#define	CNTXLRN	12	
#define	CNTXVAL	13	
#define	CNTXNRM	17	
#define	CNTXERR	21	
/*       equivalence ( CNTTOV ,CNQBUF(CNTXTOV) ) */
/*       equivalence ( CNTPNT ,CNQBUF(CNTXPNT) ) */
/*       equivalence ( CNTPAR ,CNQBUF(CNTXPAR) ) */
/*       equivalence ( CNTADD ,CNQBUF(CNTXADD) ) */
/*       equivalence ( CNTLRN ,CNQBUF(CNTXLRN) ) */
/*       equivalence ( CNTVAL ,CNQBUF(CNTXVAL) ) */
/*       equivalence ( CNTNRM ,CNQBUF(CNTXNRM) ) */

/*         PV control types. */

/*       real          RESET,ONLINE,OFLINE,ACKNOW */
#define	RESET	0.0	       /*  reset alarm */
#define	ONLINE	1.0	       /*  point online */
#define	OFLINE	2.0	       /*  point offline */
#define	ACKNOW	3.0	       /*  acknowledge alarm */

/*         Control timeout special values. */

/*       integer*2     CNTPPS, CNTDEQ, CNTALM, CNTLST */
#define	CNTPPS	0	       /*  if  = then PPS point,parameter */
#define	CNTDEQ	-50	       /*  if <= then dequeue only */
#define	CNTALM	-40	       /*  if <= then dequeue and alarm */
#define	CNTLST	-30	       /*  if <= then dequeue,alarm, and lost */

/*         Control lrn special values. */

/*       integer*2     CNTNOWAIT, CNTNOACT */
#define	CNTNOWAIT	0x8000		 /*  if bit set, then client not waiting */
#define	CNTNOACT	0xC000		 /*  if bit set, then do not PPS or alarm */




typedef struct {
    int2	next[2];
    uint2	pri;
    int2	timeout;
    uint2	point;
    int2	param;
    int2	add[5];
    int2	lrn;
    int2	val[DBLE_SZ];
    int2	nrm[DBLE_SZ];
    int2      gdaerr[4];
    } cntque;



#endif	
#endif	

