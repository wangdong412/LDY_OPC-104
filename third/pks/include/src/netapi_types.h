/************************************************************************/
/*****     COPYRIGHT 1989 - 2001    HONEYWELL LIMITED AUSTRALIA      ****/
/************************************************************************/

/* Conditionally print out a trace of header file activity */
#ifdef _HEADER_FILE_TRACE_FLAG
#pragma message("Entering Header file: netapi_types.h,v")
#endif

/* Check to see if we've finished processing this header file before */
#ifndef NETAPI_TYPES_ENDFLAG

/* Check to see if we've partially processed this header file already */
#ifdef NETAPI_TYPES_STARTFLAG
#pragma message("ERROR: Partially processed: netapi_types.h,v")
#else
#define NETAPI_TYPES_STARTFLAG

/*
@(#)netapi_types.h,v	830.1
BEGIN_DOC
---------------------------------------------------------------------------
NETAPI_TYPES.H - Contains all data types for use with Network API.
---------------------------------------------------------------------------
SUMMARY:

DESCRIPTION:

    -----------------------------------------------------------------------
    NOTES - 
    
      Note that data types used for VB are defined in hscnetapilib.h, which
      is generated by hscnetapilib.idl file.

      Only the following files which uses these structures has included the 
      hscnetapilib.h file:

        a. history_vb.c
        b. strings_vb.c
        c. stubs_vb.c
        d. variant_vb.c

    -----------------------------------------------------------------------

DEFINITIONS:

STRUCTURE:

END_DOC
*/

/***********************************************
** INCLUDE FILES
***********************************************/
#include "src/defs.h"
#include "src/netapi_flags.h"
#include <sys/timeb.h>
#include "src/ght.h"
#include "src/points.h"

/* Conditional Includes */
#ifdef	NT
#include <winsock.h>
#else
#include <netinet/in.h>
#include <sys/socket.h>
#endif
#ifndef NT
#ifndef DOS_NIF
#ifdef INTERACTIVE
#include <sys/uio.h>
#endif
#endif
#endif

/***********************************************
** Platform Specific Types
***********************************************/

#ifdef VMS
typedef unsigned long   fd_set;     
#endif VMS

/***********************************************
** Typedefs
***********************************************/

/* define types that specify the basic NADS data types */
typedef short               n_short;    /* 2 byte signed integer */
typedef unsigned short      n_ushort;   /* 2 byte unsigned integer */
typedef long                n_long;     /* 4 byte signed integer */
typedef unsigned long       n_ulong;    /* 4 byte unsigned integer */
typedef float               n_float;    /* 4 byte IEEE real number */
typedef double              n_double;   /* 8 byte IEEE real number */
typedef char                n_char;     /* 1 byte character */
typedef unsigned char       n_uchar;    /* 1 byte unsigned character */
typedef unsigned char       n_raw;      /* 1 byte raw data */
typedef __int64             n_int8;     /* 8 byte integer */
typedef unsigned __int64    n_uint8;    /* 8 byte unsigned integer */

/* define control structure for NADS streams */
typedef struct net_stream
{
    int         GHT_idx;    /* Index into the Global Host Table */
    int         socket;		/* socket descriptor for stream io */
    struct sockaddr_in	raddr;  /* generic address store */
    int         options;	/* NADS options for socket descriptor */
    n_ushort    trans_id;	/* transaction id counter for stream */
    int         snd_ptr;	/* push pointer for send stream */
    int         rcv_ptr;	/* pull pointer for receive stream */
    int         rcv_size;	/* actual amount of data received */
    int         mark_ptr;	/* mark pointer for send stream */
    char        *snd_stream;	/* points to send stream memory */
    char        *rcv_stream;	/* points to receive stream memory */
    unsigned    max_snd_size;	/* memory size of send stream */
    unsigned    max_rcv_size;	/* memory size of receive stream */
} nads_stream;

/* define structure for RRQSTSK procedure call */
typedef struct rrqstsk_data_str
{
    n_short         paramc; /* parameter count (1, 2, 3, 5) */
    n_short         lrn;    /* lrn of task to request */
    n_ushort        st;     /* optional return status */
    n_short         par1;   /* optional integer param */
    n_short         *par2;  /* optional ascii in int2 array */
    n_short         par3;   /* optional length of par2 */
} rrqstsk_data;

/* define structure for RRQTSKB procedure call */
typedef struct rrqtskb_data_str
{
    n_short         lrn;    /* lrn of task to request */
    n_ushort        rqtskb_status;
} rrqtskb_data;

/* define structure for RTIMES procedure call */
typedef struct rtimes_data_str
{
    n_ulong     real_time;
    n_ulong     u_time;
    n_ulong     s_time;
    n_ulong     cu_time;
    n_ulong     cs_time;
} rtimes_data;

/************************************************************************
*** History function data types
************************************************************************/

/* define structure for RGETHST_DATE procedure call */
struct rgethst_date_data_str
{
    n_ushort        hist_type;
    n_ulong         hist_start_date;
    n_float         hist_start_time;
    n_ushort        num_hist;
    n_ushort        num_points;
    n_ushort        *point_type_nums;
    n_char          *archive_path;
    n_float         *hist_values;
    n_ushort        gethst_status;
};

/* define stream type for simpler program notation */
typedef struct rgethst_date_data_str    rgethst_date_data;

/* define structure for RGETHST_OFST procedure call */
struct rgethst_ofst_data_str
{
    n_ushort        hist_type;
    n_ushort        hist_offset;
    n_ushort        num_hist;
    n_ushort        num_points;
    n_ushort        *point_type_nums;
    n_char          *archive_path;
    n_float         *hist_values;
    n_ushort        gethst_status;
};

/* define stream type for simpler program notation */
typedef struct rgethst_ofst_data_str    rgethst_ofst_data;

/* Structure used by rhsc_param_hist_date_bynames() and
** rhsc_param_hist_offset_bynames() */
typedef struct _HIST_BYNAME_DATA
{
    n_long          dtStartDate;        /* (in) Starting Date */
    n_float         tmStartTime;        /* (in) Starting Time */
    n_long          nHstOffset;         /* (in) History Offset */
    n_long          fGetHstParStatus;   /* (out) Status of server function c_gethstpar */
    n_short         nHstType;           /* (in) History type */
    n_ushort        cPntPrmNames;       /* (in) Number of pnt prm pairs */
    n_ushort        cHstValues;         /* (in) Number of history values for each point */
    n_char          *szArchivePath;     /* (in) Archive Path */
    n_char          **rgszPointNames;   /* (in) Array of Point Names */
    n_char          **rgszParamNames;   /* (in) Array of Parameter Names */
    n_long          *rgfPntPrmStatus;   /* (out) Array of status returned on name resolutions */
    n_float         *rgnHstValues;      /* (out) Array of history values returned */
} HIST_BYNAME_DATA;


/* define structures for RGETHSTPAR_DATE and
 * RHSC_PARAM_HIST_DATES procedure calls */
typedef struct rgethstpar_date_data_str
{
    n_ushort        hist_type;
    n_ulong         hist_start_date;
    n_float         hist_start_time;
    n_ushort        num_hist;
    n_ushort        num_points;
    n_ushort        *point_type_nums;
    n_ushort        *point_params;
    n_char          *archive_path;
    n_float         *hist_values;
    n_ushort        gethst_status;
} rgethstpar_date_data;

/* define structures for RGETHSTPAR_OFST and
 * RHSC_PARAM_HIST_OFFSETS procedure calls */
typedef struct rgethstpar_ofst_data_str
{
    n_ushort        hist_type;
    n_ushort        hist_offset;
    n_ushort        num_hist;
    n_ushort        num_points;
    n_ushort        *point_type_nums;
    n_ushort        *point_params;
    n_char          *archive_path;
    n_float         *hist_values;
    n_ushort        gethst_status;
} rgethstpar_ofst_data;


/************************************************************************
*** Point, Parameter, Error Resolution Function Data Types
************************************************************************/

/* define structure for RGETPNT procedure call */
typedef struct rgetpnt_data_str
{
    n_char          *point_name;
    n_ushort        point_type_num;
    n_ushort        getpnt_status;
} rgetpnt_data;

/* Structure used by rhsc_point_numbers()*/
typedef struct _POINT_NUMBER_DATA
{
    n_char      *szPntName; /* (in) point name to resolve */
    n_ushort    nPnt;       /* (out) point number */
    n_long      fStatus;    /* (out) status of each request. */
} POINT_NUMBER_DATA;


/* Structure used by rhsc_param_numbers() */
typedef struct _PARAM_NUMBER_DATA
{
    n_ushort    nPnt;       /* (in) point number*/
    n_char      *szPrmName; /* (in) parameter name to resolve */
    n_ushort    nPrm;       /* (out) parameter number returned */
    n_long      fStatus;    /* (out) status of each request. */
} PARAM_NUMBER_DATA;


/************************************************************************
*** Get and Put Parameter Value Function Data Types
************************************************************************/

/* define structure for RGETVAL_NUMB procedure call */
typedef struct rgetval_numb_data_str
{
    n_ushort        point_type_num;
    n_ushort        point_param;
    n_float         param_value;
    n_ushort        getval_status;
} rgetval_numb_data;

/* define structure for RGETVAL_ASCII procedure call */
typedef struct rgetval_ascii_data_str
{
    n_ushort        point_type_num;
    n_ushort        point_param;
    n_char          *param_value;
    n_ushort        param_len;
    n_ushort        getval_status;
} rgetval_ascii_data;

/* define structure for RGETVAL_HIST procedure call */
typedef struct rgetval_hist_data_str
{
    n_ushort        point_type_num;
    n_ushort        point_param;
    n_ushort        hist_offset;
    n_float         param_value;
    n_ushort        getval_status;
} rgetval_hist_data;

/* define structure for RPUTVAL_NUMB procedure call */
typedef struct rputval_numb_data_str
{
    n_ushort        point_type_num;
    n_ushort        point_param;
    n_float         param_value;
    n_ushort        putval_status;
} rputval_numb_data;

/* define structure for RPUTVAL_ASCII procedure call */
typedef struct rputval_ascii_data_str
{
    n_ushort        point_type_num;
    n_ushort        point_param;
    n_char          *param_value;
    n_ushort        putval_status;
} rputval_ascii_data;

/* define structure for RPUTVAL_HIST procedure call */
typedef struct rputval_hist_data_str
{
    n_ushort        point_type_num;
    n_ushort        point_param;
    n_ushort        hist_offset;
    n_float         param_value;
    n_ushort        putval_status;
} rputval_hist_data;

/* 
Structure used by rhsc_param_values() and rhsc_param_value_puts()
Note, prgbValue and nType are (in/out) parameters for the 
rhsc_param_value_puts function and (out) parameters for the 
rhsc_param_values function. cbValLength is (in/out) for both.
*/
typedef struct _PARAM_VALUE_DATA
{
    n_ushort    nPnt;       /* (in) point number */
    n_ushort    nPrm;       /* (in) parameter number */
    n_long      nPrmOffset; /* (in)point parameter offset */
    PARvalue    *pupvValue; /* (in/out) parameter value union */
    n_ushort    nType;      /* (in/out) value type */
    n_long      fStatus;    /* (out) status of each request. */
} PARAM_VALUE_DATA;

/* Structure used by rhsc_param_value_bynames()
* and rhsc_param_value_put_bynames() */
typedef struct _PARAM_BYNAME_DATA
{
    n_char      *szPntName; /* (in) point name */
    n_char      *szPrmName; /* (in) parameter name */
    n_long      nPrmOffset; /* (in) parameter offset */
    PARvalue    *pupvValue; /* (in/out) parameter value union */
    n_ushort    nType;      /* (in/out) value type */
    n_long      fStatus;    /* (out) status of each value access */
} PARAM_BYNAME_DATA;


/************************************************************************
*** Get and Put User File Function Data Types
************************************************************************/

/* define union used in rgetdat_value in RGETDAT procedure call */
typedef union rgetdat_value_str
{
    n_short         int2;
    n_long          int4;
    n_float         real4;
    n_double        real8;
    n_char          *str;
    n_ushort        bits;
} rgetdat_value;

/* define structure for RGETDAT procedure call */
typedef struct rgetdat_data_str
{
    n_ushort            type;
    n_ushort            file;
    n_ushort            rec;
    n_ushort            word;
    n_ushort            start_bit;
    n_ushort            length;
    n_short             flags;
    rgetdat_value       value;
    n_short             status;
} rgetdat_data;


/****************************************************************
** *** Notification, Alarm, Event Function Data Types
****************************************************************/

/* Structure used by rhsc_notifications() */
typedef struct _NOTIFICATION_DATA
{
    struct timeb timebuf;   /* (in) RESERVED FOR FUTURE USE        */
    n_long nPriority;       /* (in) priority (see below for      
                                    definition)                    */
    n_long nSubPriority;    /* (in) sub-priority (value can be 
                                    0 (lowest) to 15 (highest))    */
    n_char *szName;         /* (in) name (usually point name)      */
    n_char *szEvent;        /* (in) event                          */
    n_char *szAction;       /* (in) action                         */
    n_char *szLevel;        /* (in) level                          */
    n_char *szDesc;         /* (in) descriptn (usually param name) */
    n_char *szValue;        /* (in) alarm value                    */
    n_char *szUnits;        /* (in) alarm units                    */
    n_long fStatus;         /* (out) UNUSED AT THE MOMENT          */
} NOTIFICATION_DATA;

#define NETAPI_TYPES_ENDFLAG
#endif               /* end of if not *_startflag */
#endif               /* end of if not *_endflag */

/* Conditionally print out a trace of header file activity */
#ifdef _HEADER_FILE_TRACE_FLAG
#pragma message("Leaving Header file: netapi_types.h,v")
#endif

/************************************************************************/
/*****     COPYRIGHT 1989 - 2001    HONEYWELL LIMITED AUSTRALIA      ****/
/************************************************************************/
