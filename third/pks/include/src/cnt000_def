#if	!defined(CNTSZ)

/*                             CNT000 - point CONTROL file */
/*                             --------------------------- */

/*     SCCS REVISION: */
/*         @(#)cnt000_def,v	830.1 */

/*     NOTES: */
/*	1) Reals and integer*4s must start on words 1,3,5 etc. */
/*	2) Doubles must start on 1,5,9 etc. */
/*	3) Sizes must be multiple of 4 to maintain 64 bit alignment. */


/*       integer*2      CNTSZ, CNTSZ_STA, CNTSZ_ANA, CNTSZ_ACC */
/*       integer*2             CNTSZ_ACS, CNTSZ_CDA, CNTSZ_ASH */
#define	CNTSZ	64	
#define	CNTSZ_STA	20	
#define	CNTSZ_ANA	56	
#define	CNTSZ_ACC	12	
#define	CNTSZ_ACS	64	
#define	CNTSZ_CDA	4	
#define	CNTSZ_ASH	4	

#if	!defined(USE_DERIVED_TYPE)
/*       integer*2     CNTBUF(CNTSZ) */
#endif	


/*         STATUS point */
/*                              5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                             --------------------------------- */
/*                           1 !   C   !   B   !       A       ! */
/*                             --------------------------------- */
/*                           2 !       E       ! - - - - - !F!D! */
/*                             --------------------------------- */
/*                         3,7 !  PV address packet            ! */
/*                             --------------------------------- */
/*                        8,12 !  MD address packet            ! */
/*                             --------------------------------- */
/*                       13,17 !  OP address packet            ! */
/*                             --------------------------------- */
/*                          18 !   T3  !   T2  !   T1  !   T0  ! */
/*                             --------------------------------- */
/*                             ! report mode for SE (SEEP) pnts! */
/*                             !              OR               ! */
/*                          19 ! MNTR ENTERZON rec#  (SE CHIP) ! */
/*                             !              OR               ! */
/*                             !   floor ENTERZON rec number   ! */
/*                             --------------------------------- */
/*                          20 !          spare                ! */
/*                             --------------------------------- */


typedef struct
    {
    uint2 flags;		/* flags (as above)		*/
    uint2 level;		/* control level		*/
    uint2 pvaddr[5];		/* PV address	     		*/
    uint2 mdaddr[5];		/* MD address	     		*/
    uint2 opaddr[5];		/* OP address	     		*/
    uint2 targets;		/* target states		*/
    uint2 reportmode;		/* report mode (schlage) 	*/
    uint2 spare20;
    } STA_CNT;


/*       integer*2      CNTINH, CNTTOI, PLSWID, MDDISABLE, CNTLVL */
/*       integer*2      CNTSTA, CNTSTA1, CNTSTA2, CNTSTA3 */
/*       integer*2      PVADDPKT, PVADDRTU, PVADDPER */
/*       integer*2      MCNRPT, CCONFIRM, EZONE_STA */
#define	CNTINH	0x7081		  /*  A - output inhibit flags */
/*                                              (indexed by parameter) */
#define	CNTTOI	0x3881		  /*  B - timeout index */
#define	PLSWID	0x3C81		  /*  C - status OP pulse width code */
/*                                              0 - LATCHED    8 - 3S */
/*                                              1 - 200MS      9 - 4S */
/*                                              2 - 300MS      A - 5S */
/*                                              3 - 400MS      B - 10S */
/*                                              4 - 500MS      C - 20S */
/*                                              5 - 800MS      D - 30S */
/*                                              6 - 1S         E - 60S */
/*                                              7 - 2S         F - 120S */
#define	MDDISABLE	0x0082		/*  D - mode control disabled */
#define	CCONFIRM	0x0182		/*  F - Control confirmation required */
#define	CNTLVL	0x7882		/*  E - control level */
#define	PVADDPKT	0x0583		/*  PV address packet */
#define	PVADDRTU	0x7083		/*  PV address RTU */
#define	PVADDPER	0x3484		/*  PV address period */
#define	CNTSTA	0x3092			/*  T0 - input state corresponding */
/*                                               to output state 0 */
#define	CNTSTA1	0x3492			/*  T1 - input state for state 1 */
#define	CNTSTA2	0x3892		 /*  T2 - input state for state 2 */
#define	CNTSTA3	0x3C92		 /*  T3 - input state for state 3 */
#define	MCNRPT	0xF093		  /*  report mode for schlage monitor pnts */
#define	EZONE_STA	0xF093		  /*  Zone Enforcement entry zone */


/*         ANALOG point */
/*                              5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                             --------------------------------- */
/*                           1 !   C   !   B   !       A       ! */
/*                             --------------------------------- */
/*                           2 !       E       ! - - - - - !F!D! */
/*                             --------------------------------- */
/*                         3,7 !  PV address packet            ! */
/*                             --------------------------------- */
/*                        8,12 !  MD address packet            ! */
/*                             --------------------------------- */
/*                       13,17 !  OP address packet            ! */
/*                             --------------------------------- */
/*                       18,22 !  SP address packet            ! */
/*                             --------------------------------- */
/*                       23,27 !  A1 address packet            ! */
/*                             --------------------------------- */
/*                       28,32 !  A2 address packet            ! */
/*                             --------------------------------- */
/*                       33,37 !  A3 address packet            ! */
/*                             --------------------------------- */
/*                       38,42 !  A4 address packet            ! */
/*                             --------------------------------- */
/*                       43,44 !  op low clamp (%)             ! */
/*                             --------------------------------- */
/*                       45,46 !  op high clamp (%)            ! */
/*                             --------------------------------- */
/*                       47,48 !  sp low clamp (eu)            ! */
/*                             --------------------------------- */
/*                       49,50 !  sp high clamp (eu)           ! */
/*                             --------------------------------- */
/*                          51 !  auxilary 1 associated param. ! */
/*                             --------------------------------- */
/*                          52 !  auxilary 2 associated param. ! */
/*                             --------------------------------- */
/*                          53 !  auxilary 3 associated param. ! */
/*                             --------------------------------- */
/*                          54 !  auxilary 4 associated param. ! */
/*                             --------------------------------- */
/*                       55,56 !          spare                ! */
/*                             --------------------------------- */


typedef struct
    {
    uint2 flags;		/* flags (as above)		*/
    uint2 level;		/* control level		*/
    uint2 pvaddr[5];		/* PV address	     		*/
    uint2 mdaddr[5];		/* MD address	     		*/
    uint2 opaddr[5];		/* OP address	     		*/
    uint2 spaddr[5];		/* SP address	     		*/
    uint2 a1addr[5];		/* A1 address	     		*/
    uint2 a2addr[5];		/* A2 address	     		*/
    uint2 a3addr[5];		/* A3 address	     		*/
    uint2 a4addr[5];		/* A4 address	     		*/
    float oplo;		/* OP low  limit		*/
    float ophi;		/* OP high limit		*/
    float splo;		/* SP low  limit		*/
    float sphi;		/* SP high limit		*/
    uint2 a1assoc;		/* A1 associated parameter	*/
    uint2 a2assoc;		/* A2 associated parameter	*/
    uint2 a3assoc;		/* A3 associated parameter	*/
    uint2 a4assoc;		/* A4 associated parameter	*/
    uint2 spare55[2];
    } ANA_CNT;


/*       integer*2      OPLOP, OPHIP, SPLOP, SPHIP */
/*       integer*2      A1SOCP, A2SOCP, A3SOCP, A4SOCP */
#define	OPLOP	0x00AB		   /*  output low clamp */
#define	OPHIP	0x00AD		   /*  output high clamp */
#define	SPLOP	0x00AF		   /*  setpoint low clamp */
#define	SPHIP	0x00B1		   /*  setpoint high clamp */
#define	A1SOCP	0xF0B3		   /*  auxilary 1 associated parameter */
#define	A2SOCP	0xF0B4		   /*  auxilary 2 associated parameter */
#define	A3SOCP	0xF0B5		   /*  auxilary 3 associated parameter */
#define	A4SOCP	0xF0B6		   /*  auxilary 4 associated parameter */
#if	!defined(USE_DERIVED_TYPE)
/*       real          OPLOV ,OPHIV ,SPLOV ,SPHIV */
/*       integer*2     AXSOC(4) */
/*       equivalence ( OPLOV , $buf(OPLOP ) ) */
/*       equivalence ( OPHIV , $buf(OPHIP ) ) */
/*       equivalence ( SPLOV , $buf(SPLOP ) ) */
/*       equivalence ( SPHIV , $buf(SPHIP ) ) */
/*       equivalence ( AXSOC , $buf(A1SOCP) ) */
#endif	



/*         ACCUML point */
/*                              5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                             --------------------------------- */
/*                           1 !   C   !   B   !       A       ! */
/*                             --------------------------------- */
/*                           2 !       E       ! - - - - - !F!D! */
/*                             --------------------------------- */
/*                         3,7 !  PV address packet            ! */
/*                             --------------------------------- */
/*                        8,12 !  MD address packet            ! */
/*                             --------------------------------- */


typedef struct
    {
    uint2 flags;		/* flags (as above)		*/
    uint2 level;		/* control level		*/
    uint2 pvaddr[5];		/* PV address	     		*/
    uint2 mdaddr[5];		/* MD address	     		*/
    } ACC_CNT;




/*         ACCESS point */
/*                              5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                             --------------------------------- */
/*                           1 !   C   !   B   !       A       ! */
/*                             --------------------------------- */
/*                           2 !       E       ! - - - - - !F!D! */
/*                             --------------------------------- */
/*                         3,7 !  PV address packet            ! */
/*                             --------------------------------- */
/*                           8 !  Unlock time (1-240)(schlage) ! */
/*                             --------------------------------- */
/*                           9 !  Sensor Type 0=normal,1=open, ! */
/*                             !              2=closed,3=station! */
/*                             --------------------------------- */
/*                          10 !  Anti Passback 0=none, 1=entry! */
/*                             !                2=exit         ! */
/*                             --------------------------------- */
/*                          11 !  Door Switch ( 0 - 32 )       ! */
/*                             --------------------------------- */
/*                          12 !  Auto Unlock Time Period 1    ! */
/*                             --------------------------------- */
/*                          13 !  Auto Unlock Time Period 2    ! */
/*                             --------------------------------- */
/*                          14 !  Auto Unlock Time Period 3    ! */
/*                             --------------------------------- */
/*                          15 !  Auto Unlock Time Period 4    ! */
/*                             --------------------------------- */
/*                          16 !  REX  Switch ( 0 - 32 )       ! */
/*                             --------------------------------- */
/*                          17 !  Door Forced Open REPORT MODE ! */
/*                             --------------------------------- */
/*                          18 !  Door Open Long   REPORT MODE ! */
/*                             --------------------------------- */
/*                          19 !  maximum door open time 1-240 ! */
/*                             --------------------------------- */
/*                          20 !  Access Granted   REPORT MODE ! */
/*                             --------------------------------- */
/*                          21 !  Access Denied    REPORT MODE ! */
/*                             --------------------------------- */
/*                          22 !  COAX failed      REPORT MODE ! */
/*                             --------------------------------- */
/*                          23 !  SENSOR failed    REPORT MODE ! */
/*                             --------------------------------- */
/*                          24 !  Key Trace        REPORT MODE ! */
/*                             --------------------------------- */
/*                          25 !R2 Type!R1 Type!P!A! !M!S!V!U!R! */
/*                             --------------------------------- */
/*                             ! Reader 1 Type = 0 Sensor      ! */
/*                             !               = 1 DKR         ! */
/*                             !               = 2 SCR         ! */
/*                             !               = 3 MSR5        ! */
/*                             !               = 4 MSRK5       ! */
/*                             ! Reader 2 Type = 0 Sensor      ! */
/*                             !               = 1 DKR         ! */
/*                             !               = 2 SCR         ! */
/*                             !               = 3 MSR5        ! */
/*                             !               = 4 MSRK5       ! */
/*                             !       R =  Reverse Action Lock (1 = yes ) */
/*                             !       U =  Rex Unlock ( 1 = yes ) */
/*                             !       V =  Vip Enable ( 1=yes) */
/*                             !       S =  Sensor Disable( 1=yes) */
/*                             !       M =  MSM Disable( 1=yes)(818Sc only) */
/*                             !       A =  Antipassback type for 818SX/SC */
/*                             !            0 = Hard, 1 = Soft ( RESERVED ) */
/*                             !       P =  Read key while door open ( 1=yes) */
/*                             --------------------------------- */
/*                          26 !  Valid REX   Time Period 1    ! */
/*                             --------------------------------- */
/*                          27 !  Valid REX   Time Period 2    ! */
/*                             --------------------------------- */
/*                          28 !  Valid REX   Time Period 3    ! */
/*                             --------------------------------- */
/*                          29 !  Valid REX   Time Period 4    ! */
/*                             --------------------------------- */
/*                          30 !  MSM failed       REPORT MODE ! */
/*                             --------------------------------- */
/*                          31 !  Exit Granted     REPORT MODE ! */
/*                             --------------------------------- */
/*                          32 !  Exit Denied      REPORT MODE ! */
/*                             --------------------------------- */
/*                          33 !  Passback Type 0=hard, 1=soft ! */
/*                             --------------------------------- */
/*                          34 !  Vip Failed       REPORT MODE ! */
/*                             --------------------------------- */
/*                          35 ! Vip/SCR/DKR Tamper REPORT MODE! */
/*                             --------------------------------- */
/*                          36 !  Vip Enable Time Period #1    ! */
/*                             --------------------------------- */
/*                          37 !  Vip Enable Time Period #2    ! */
/*                             --------------------------------- */
/*                          38 !  Vip Enable Time Period #3    ! */
/*                             --------------------------------- */
/*                          39 !  Vip Enable Time Period #4    ! */
/*                             --------------------------------- */
/*                          40 !  Vip Enable Building Modes    ! */
/*                             !       bit 7 = Closed          ! */
/*                             !       bit 6 = Limited         ! */
/*                             !       bit 5 = Open            ! */
/*                             --------------------------------- */
/*                          41 ! Secondary reader fail report  ! */
/*                             --------------------------------- */
/*                          42 ! Door Relay ID                 ! */
/*                             --------------------------------- */
/*                          43 ! SE CHIP DATA Index            ! */
/*                             --------------------------------- */
/*                       44-52 !         s p a r e             ! */
/*                             --------------------------------- */
/*                          53 !  Minimum resolution (same key)! */
/*                             --------------------------------- */
/*                          54 !  Time Frame(seconds)-Portals  ! */
/*                             --------------------------------- */
/*                          55 !  Entry Access Point -Portals  ! */
/*                             --------------------------------- */
/*                          56 !  Exit  Access Point -Portals  ! */
/*                             --------------------------------- */
/*                          57 !  Alarm Point        -Portals  ! */
/*                             --------------------------------- */
/*                       58-60 ! OPERID OF LAST OPERATOR TO MOD! */
/*                             --------------------------------- */
/*                             ! TIME OF LAST MODIFICATION     ! */
/*                          61 !  - date                       ! */
/*                          62 !  - time                       ! */
/*                          63 !  - flags                      ! */
/*                             --------------------------------- */
/*                          64 !          spare                ! */
/*                             --------------------------------- */


typedef struct
    {
    uint2 flags;		/* flags (as above)		*/
    uint2 level;		/* control level		*/
    uint2 pvaddr[5];		/* PV address	     		*/
    uint2 TheRest[CNTSZ_ACS-7];
    } ACS_CNT;


/*       integer*2   PV_RTU */
#define	PV_RTU	0x7083		
/*       integer*2   PV_ADDR */
#define	PV_ADDR	0xF085		

/*       integer*2   ACNUTM, ACNSTP, ACNAPB, ACNDS , ACNREX, ACNFRM */
/*       integer*2   ACNHRM, ACNMTM, ACNGRM, ACNDRM, ACNCRM, ACNSRM */
/*       integer*2   ACNTRM, ACNFLG, ACNMRM, ACNEGR, ACNEDR, ACNPBT */
/*       integer*2   ACNTMS, ACNMFG, ACNFLG_PBT, ACNNODEL_OFF */
/*       integer*2	  ACNFLG_RAL, ACNFLG_REX, ACNFLG_VIP */
/*       integer*2	  ACNFLG_SNS, ACNFLG_MSM, ACNFLG_RKO */
/*       integer*2   ACNFRTP, ACNFRTP_SP, ACNSRTP, ACNSRTP_SP */
/*       integer*2	  ACNAUT_OFF, ACNRTM_OFF, ACNSDS */
#define	ACNNODEL_OFF	8	     /*  Position from which not to delete */
/*                                          when an access point is deleted. */
#define	ACNUTM	0x7088		     /*  Door Unlock time */
#define	ACNSTP	0x7089		     /*  sensor type */
#define	ACNAPB	0x708A		     /*  Anti passback type */
#define	ACNDS	0x708B		     /*  door switch no */
#define	ACNAUT_OFF	12	       /*  off set for auto unlock tps */
/*       integer*2  ACNMAX_TPD_SEGS 	;* num of segs of tp for door */
#define	ACNMAX_TPD_SEGS	3 	
/*       integer*2  ACNMAX_TPDS 		;* num of time periods per seg */
#define	ACNMAX_TPDS	4 	
#define	ACNREX	0x7090		     /*  REX switch no */
#define	ACNFRM	0x7091		     /*  Door Forced open Report Mode */
#define	ACNHRM	0x7092		     /*  Door HELD open Report Mode */
#define	ACNMTM	0x7093		     /*  Maximum door open time */
#define	ACNGRM	0x7094		     /*  Access Granted Report Mode */
#define	ACNDRM	0x7095		     /*  Access Denied Report Mode */
#define	ACNCRM	0x7096		     /*  COAX failed Report Mode */
#define	ACNSRM	0x7097		     /*  Sensor failed Report Mode */
#define	ACNTRM	0x7098		     /*  Key Trace Report Mode */
#define	ACNFRTP	0x3899		    /*  First Reader Type */
#define	ACNFRTP_SP	0x0408		 /*  First Reader Type Start Position (LSB) and length (MSB) */
#define	ACNSRTP	0x3C99		    /*  Second Reader Type */
#define	ACNSRTP_SP	0x040C		 /*  Second Reader Type Start Position (LSB) and length (MSB) */
/*       integer*2   ACNRTP_SENSOR, ACNRTP_SCR, ACNRTP_DKR */
/*       integer*2   ACNRTP_MSR5, ACNRTP_MSRK5 */
#define	ACNRTP_SENSOR	0 	
#define	ACNRTP_DKR	1 	
#define	ACNRTP_SCR	2 	
#define	ACNRTP_MSR5	3 	
#define	ACNRTP_MSRK5	4 	
#define	ACNFLG	0x7099		     /*  Door Flags */

/*                                       ;* Bit 0 = Reverse Action Lock 1=Yes */
/*                                       ;* Bit 1 = Rex Unlock          1=Yes */
/*                                       ;* Bit 2 = Vip Enable          1=Yes */
/*                                       ;* Bit 3 = Sensor Disable      1=Yes */
/*                                       ;* Bit 4 = MSM Disable         1=Yes */
/*                                       ;* Bit 5 = Reserved */
/*                                       ;* Bit 6 = Passback type 0=Hard,1=soft */
/*                                       ;*         for 818 onwards only */
/*                                       ;* Bit 7 = Read key when door open 1=Yes */

#define	ACNFLG_RAL	0	       /*  Reverse Action Lock bit in flags */
#define	ACNFLG_REX	1	       /*  Rex Unlock bit in flags */
#define	ACNFLG_VIP	2	       /*  Vip Enable bit in flags */
#define	ACNFLG_SNS	3	       /*  Sensor Disable bit in flags */
#define	ACNFLG_MSM	4	       /*  MSM Disable bit in flags */
#define	ACNFLG_PBT	6	       /*  pass back type bit for 818 in flags */
#define	ACNFLG_RKO	7	       /*  Read key when door open bit in flags */
#define	ACNSDS	0x0399		     /*  Sensor disable bit */
#define	ACNRTM_OFF	26	       /*  off set for rex tps */
#define	ACNMRM	0x709E		     /*  MSM failed Report Mode */
#define	ACNEGR	0x709F		     /*  Exit Granted Report Mode */
#define	ACNEDR	0x70A0		     /*  Exit Denied Report Mode */
#define	ACNPBT	0x70A1		     /*  Passback type */
/*       integer*2  ACNVFR,ACNVTR,ACNVET_OFF,ACNVEM */
/*       integer*2	 ACNVEM_OP, ACNVEM_LI, ACNVEM_CL */
#define	ACNVFR	0x70A2		     /*  Vip Failed Report Mode */
#define	ACNVTR	0x70A3		     /*  Vip Tamper Report Mode */
#define	ACNVET_OFF	36	      /*  Vip Enable Time periods offset */
#define	ACNVEM	0x70A8		     /*  Vip Enable building Modes */
#define	ACNVEM_OP	5		/*  Vip Enable building open */
#define	ACNVEM_LI	6		/*  Vip Enable building limited */
#define	ACNVEM_CL	7		/*  Vip Enable building closed */

/*       integer*2  ACNMAX_DR_RPTS         ;* num of reports for door */
#define	ACNMAX_DR_RPTS	13 	
/*       integer*2  ACNMAX_DR_UTM */
/*       integer*2  ACNMAX_DR_OTM */
#define	ACNMAX_DR_UTM	240 		/*  maximum schlage door unlock time */
#define	ACNMAX_DR_OTM	240 		/*  maximum schlage door open time */

/*       integer*2  ACNSRFR, ACNRLY, ACNRLY_MAX, ACNRLY_AXSSII_MAX */
#define	ACNSRFR	0x70A9		     /*  Secondary SNET reader fail report */
#define	ACNRLY	0x70AA		      /*  Relay ID (in place of MSM fail RM for SE4100) */
#define	ACNRLY_MAX	16	       /*  Relay ID maximum */
#define	ACNRLY_AXSSII_MAX	10	/*  Relay ID maximum for AXSSII */

/*       integer*2  ACNCHPIDX */
#define	ACNCHPIDX	0xF0AB		  /*  CHIP DATA index */
#define	ACNTMS	0xF0BA		     /*  time stamp last operator id */
#define	ACNMFG	0xF0BF		     /*  time stamp modification flag */


/* Information specially defined for Asset tracking portals */

/*       integer*2      ACNENT,ACNEXT */
#define	ACNENT	0xF0B7		   /*  Entry Access Point */
#define	ACNEXT	0xF0B8		   /*  Exit  Access Point */

#if	!defined(USE_DERIVED_TYPE)
/*       integer*2  ACNAUT(ACNMAX_TPDS)	;* Auto Unlock time periods */
/*       integer*2  ACNRTM(ACNMAX_TPDS)	;* REX time periods */
/*       integer*2  ACNVET(ACNMAX_TPDS)	;* Vip enable Time periods */
/*       equivalence (ACNAUT,CNTBUF(ACNAUT_OFF)) */
/*       equivalence (ACNRTM,CNTBUF(ACNRTM_OFF)) */
/*       equivalence (ACNVET,CNTBUF(ACNVET_OFF)) */
#endif	



/*         CDA point (and other GDA type points) */

/*                              5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                             --------------------------------- */
/*                           1 !   C   !   B   !       A       ! */
/*                             --------------------------------- */
/*                           2 !       E       ! - - - - - !F!D! */
/*                             --------------------------------- */
/*                         3,4 !          spare                ! */
/*                             --------------------------------- */


typedef struct
    {
    uint2 flags;		/* flags (as above)		*/
    uint2 level;		/* control level		*/
    uint2 spare3[2];
    } CDA_CNT;




/*         ASH point (and other hierarchy points) */

/*                              5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                             --------------------------------- */
/*                           1 !   C   !   B   !       A       ! */
/*                             --------------------------------- */
/*                           2 !       E       ! - - - - - !F!D! */
/*                             --------------------------------- */
/*                         3,4 !          spare                ! */
/*                             --------------------------------- */


typedef struct
    {
    uint2 flags;		/* flags (as above)		*/
    uint2 level;		/* control level		*/
    uint2 spare3[2];
    } ASH_CNT;



/*-------- Address packet --------------------------------------------- */

/*--- FS90 Address packet --- */

/*                              5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                             --------------------------------- */
/*                           1 !   A   !   B   !    rtu        ! */
/*                             --------------------------------- */
/*                           2 !       C       !   D   !   E   !  # */
/*                             ---------------------------------  # read */
/*                           3 ! Priority data (Non PV control)!  # */
/*                             --------------------------------- */
/*                           4 !       C       !   -   !   E   !  # */
/*                             ---------------------------------  # write */
/*                           5 !   Priority data (PV Control)  !  # */
/*                             --------------------------------- */

/*--- Non FS90 Address packet --- */

/*                              5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                             --------------------------------- */
/*                           1 !   A   !   B   !    rtu        ! */
/*                             --------------------------------- */
/*                           2 !       C       !   D   !   E   !  # */
/*                             ---------------------------------  # read */
/*                           3 !           address             !  # */
/*                             --------------------------------- */
/*                           4 !       C       !   -   !   E   !  # */
/*                             ---------------------------------  # write */
/*                           5 !           address             !  # */
/*                             --------------------------------- */

/*                             A - scan type (see SCNTBL_DEF) */

/*                             B - parameter */

/*                   The DPS6 data types for each parameter are: */
/*                   PV   MD   OP   SP   A1   A2   A3   A4 */
/*          Status.  I2   I2   I2    -    -    -    -    - */
/*          Analog.  RL   I2   RL   RL   RL   RL   RL   RL */
/*          Accuml.  RL   I2    -    -    -    -    -    - */

/*                             C - data format */

/*           integer*2   HALFWD, B0, B4, B7, B12, B15, T1, T2, TD */
/*           integer*2   MFCFP, PMXFP, VAXFP */
/*           integer*2   DPS6I2, DPS6I4, DPS6FP, DPS6DP */
/*           integer*2   C16, SREAL, LREAL, C3BCD, C4BCD, C8BCD */
/*           integer*2   XLPCC, XLPRH, R32, HIGHWORD, LOWWORD */
/*           integer*2   IEEEFP, IEEEFPL, IEEEFPBB, IEEEFPLB */
/*           integer*2   LCN0, LCN1, LCN2, LCN3, LCN4 */
/*           integer*2   LCN5, LCN6, LCN7, LCN8, LCN9, LCN10 */
/*           integer*2   MFCTM, MODE, FENUM, FTEXT, REVWD, DPR3V, MMU, MMUS */
/*           integer*2   FS90PVA, FS90DC, FS90DS, FS90RDR, FS90SEC */
/*           integer*2   SCALED, U1023, U4095, U9999, S9999, B12E, B12ES */
/*           integer*2   U999, B12S, PIUOP, U3BCD, U4BCD, U6BCD, U8BCD */
/*           integer*2   UBCD16, UBCD12, U16B, S16B, E3BCD, U100, U15B, U14B */
/* 	  integer*2   SLC_AI, SLC_AO, U9998, S8B, U8B, D9999 */
/* 	  integer*2   FSC0TO20MA, FSC4TO20MA, FSC0TO5V */
/* 	  integer*2   FSC1TO5V, FSC0TO10V, FSC2TO10V */
/* 	  integer*2   S32B , U32B , S32BB , U32BB */
/* 	  integer*2   S32BS, U32BS, S32BSB, U32BSB */
/* 	  integer*2   USRFMT1, USRFMTN, USRFMT1S, USRFMTNS */
/* 	  integer*2   SM0TO20MA, SM4TO20MA, SM0TO5V */
/* 	  integer*2   SM1TO5V, SM0TO10V, SM2TO10V */

/*                                       Whole value formats */
/*                               0	;* whole word */
#define	HALFWD	1 		/*  upper half word */
#define	B0	2 		/*  TDC B0 */
#define	B4	3 		/*  TDC B4 */
#define	B7	4 		/*  TDC B7 */
#define	B12	5 		/*  TDC B12 */
#define	B15	6 		/*  TDC B15 */
#define	T1	7 		/*  TDC integral coefficient */
#define	T2	8 		/*  TDC derivative coefficient */
#define	TD	9 		/*  TDC filter constant */
#define	MFCFP	10 		/*  MFC floating point */
#define	PMXFP	11 		/*  PMX floating point */
#define	VAXFP	12 		/*  VAX floating point */
#define	DPS6FP	13 		/*  DPS6 floating point (native real) */
#define	DPS6I4	14 		/*  DPS6 integer*4 (native int4) */
#define	DPS6DP	15 		/*  DPS6 double precission (native dble) */
#define	C16	16 		/*  16 bit counter */
#define	SREAL	17 		/*  SMITH - short real */
#define	LREAL	18 		/*  SMITH - long real */
#define	C3BCD	19 		/*  3 digit BCD 0 to 999 counts */
#define	C4BCD	20 		/*  4 digit BCD 0 to 9999 counts */
#define	C8BCD	21 		/*  8 digit BCD 0 to 99999999 counts */
#define	XLPCC	22 		/*  EXCEL PLUS run time - cycle counts */
#define	XLPRH	23 		/*  EXCEL PLUS run time - run hours */
#define	R32	24 		/*  ASEA PLC - 32 bits real */
#define	HIGHWORD	25 		/*  ASEA PLC - hi-word of 32 bits Bool */
#define	LOWWORD	26 		/*  ASEA PLC - lo-word of 32 bits Bool */
#define	IEEEFP	27 	     /*  IEEE Floating Point (Big Endian) */
#define	IEEEFPL	28 	     /*  IEEE Floating Point (Little Endian) */
#define	DPS6I2	29 	     /*  DPS6 integer*2 (native I2) */
#define	MFCTM	30 		/*  MFC timer value */
#define	MODE	31 		/*  mode */
#define	IEEEFPBB	32 	     /*  byte swapped Big Endian float */
#define	IEEEFPLB	33 	     /*  byte swapped Little Endian float */
#define	S32BB	34 	     /*  32 bit signed binary Big Endian */
#define	U32BB	35 	     /*  32 bit unsigned binary Big Endian */

#define	LCN0	40 		/*  lcn no type */
#define	LCN1	41 		/*  lcn real */
#define	LCN2	42 		/*  lcn integer */
#define	LCN3	43 		/*  lcn ascii */
#define	LCN4	44 		/*  lcn enumerated/boolean */
#define	LCN5	45 		/*  lcn ordinal of enumeration */
#define	LCN6	46 		/*  lcn time */
#define	LCN7	47 		/*  lcn array of real */
#define	LCN8	48 		/*  lcn array of integer */
#define	LCN9	49 		/*  lcn array of enumerated */
#define	LCN10	50 		/*  lcn array of ordinal of enumeration */
#define	S32B	51 	     /*  32 bit signed binary */
#define	U32B	52 	     /*  32 bit unsigned binary */
#define	DPR3V	53 	     /*  DPR3000 value (32 bit) */
#define	MMU	54 	     /*  Moore Mycro */
#define	FS90PVA	55 	     /*  FS90 Analog PV */
#define	FS90DC	56 	     /*  FS90 Door Control */
#define	FS90DS	57 	     /*  FS90 Door Status */
#define	FS90RDR	58 	     /*  FS90 Reader */
#define	FS90SEC	59 	     /*  FS90 Security */

#define	USRFMT1	101	     /*  unscaled user format 1 */
/*			       ... */
#define	USRFMTN	120	     /*  unscaled user format n (last one) */

#define	FENUM	125	     /*  enumerated integer */
#define	FTEXT	126	     /*  text */
#define	REVWD	127		/*  reverse word */

/*                                       Scaled value formats */
#define	SCALED	128	
#define	U1023	128		/*      0 to 1023   (U=unsigned) */
#define	U4095	129		/*      0 to 4095 */
#define	U9999	130		/*      0 to 9999 */
#define	S9999	131		/*  -9999 to 9999   (S=signed) */
#define	B12E	132		/*  TDC pv,sp,op    (B12 247 to 3847) */
#define	B12ES	133		/*  TDC DHP analogs (B12 967 to 3847) */
#define	U999	134		/*      0 to  999 */
#define	B12S	135		/*  TDC dev.alarms  (B12   0 to 3600) */
#define	PIUOP	136		/*  TDC PIU output  (B10  62 to  962) */
#define	U3BCD	137		/*  3 digit BCD 0 to 999 */
#define	U4BCD	138		/*  4 digit BCD 0 to 9999 */
#define	U6BCD	139		/*  6 digit BCD 0 to 999999 */
#define	U8BCD	140		/*  8 digit BCD 0 to 99999999 */
#define	UBCD16	141		/*  4 digit BCD 0 to 4095 */
#define	UBCD12	142		/*  3 digit BCD 0 to 410 */
#define	U16B	143		/*  16 bit unsigned binary */
#define	S16B	144		/*  16 bit signed binary */
#define	E3BCD	145		/*  3 digit BCD with error status */
#define	U100	146		/*  0 to 100 percent */
#define	U15B	147		/*  15 bit unsigned binary */
#define	U14B	148		/*  14 bit unsigned binary */
#define	SLC_AI	149		/*  A-B SLC Analog Input 3277 to 16384 */
#define	SLC_AO	150		/*  A-B SLC Analog Output 6242to 31208 */
#define	U9998	151		/*      0 to 9998 for Square D AI */
#define	S8B	152	     /*  8 bit signed binary */
#define	U8B	153	     /*  8 bit unsigned binary */
#define	D9999	154	     /*  double integer for A-B QCL */
#define	MMUS	155	     /*  Moore Mycro scaled */
#define	FSC0TO20MA	156	 /*  FSC 0 to 20mA */
#define	FSC4TO20MA	157	 /*  FSC 4 to 20mA */
#define	FSC0TO5V	158	 /*  FSC 0 to 5V */
#define	FSC1TO5V	159	 /*  FSC 1 to 5V */
#define	FSC0TO10V	160	 /*  FSC 0 to 10V */
#define	FSC2TO10V	161	 /*  FSC 2 to 10V */
#define	S32BS	162	 /*  32 bit signed binary */
#define	U32BS	163	 /*  32 bit unsigned binary */
#define	S32BSB	164	 /*  32 bit signed binary Big Endian */
#define	U32BSB	165	 /*  32 bit unsigned binary Big Endian */
#define	SM0TO20MA	166	 /*  SM 0 to 20mA */
#define	SM4TO20MA	167	 /*  SM 4 to 20mA */
#define	SM0TO5V	168	 /*  SM 0 to 5V */
#define	SM1TO5V	169	 /*  SM 1 to 5V */
#define	SM0TO10V	170	 /*  SM 0 to 10V */
#define	SM2TO10V	171	 /*  SM 2 to 10V */

#define	USRFMT1S	231	     /*  scaled user format 1 */
/*			       ... */
#define	USRFMTNS	250	     /*  caled user format n (last one) */

/*                             D - scan rate index */

/*                             E - bit number (status only) */


/*-------- Address ---------------------------------------------------- */

/*         Address is both scan type and device type dependent. */

/*         Scan type 0 - there is no address */

/*         Scan type 1 - requires 3 words. Same address is used for writing */
/*                       since address resides in words 3,4, and 5 of packet. */
/*                             word 3 - file number */
/*                                  4 - record number */
/*                                  5 - word number (bits 0-11) */
/*                                    - width (bits 12-15) */
/*                                      .or. */
/*                             word 3 - =-1 */
/*                                  4 - point number */
/*                                  5 - parameter number */

/*         Scan type 2 - 1 word, device dependent */

/*                   TDC2000 - 11 bit box address */
/*       integer*2  MSGCFM, BOXSTS, BOXCLR, BOXSTR, BOXIDL, BOXPRC */
/*       integer*2  BOXSWT, BOXTST, BOXSAV, BOXSWB, BOXENB, BOXDIS */
#define	MSGCFM	-2	          /*  special address for message confirm */
#define	BOXSTS	-1	          /*  special address for box status control */
/*                                      ;* box status values */
#define	BOXCLR	0	          /*    "CLR" function */
#define	BOXSTR	1	          /*    "STR" function */
#define	BOXIDL	2	          /*    "IDL" function */
#define	BOXPRC	3	          /*    "PRC" function */
#define	BOXSWT	4	          /*    "SWT" function */
#define	BOXTST	5	          /*    "TST" function */
#define	BOXSAV	6	          /*    "SAV" function */
#define	BOXSWB	7	          /*    "SWB" function */
#define	BOXENB	8	          /*    "ENB" function */
#define	BOXDIS	9	          /*    "DIS" function */

/*                   Hydril  - z'afgd' */
/*                                       a - applications flag (bit 15) */
/*                                       f - field */
/*                                       g - group */
/*                                       d - data type */

/*                   GE 6    - address    0-1023 == inputs 1-1024 */
/*                             address 1024-2047 == outputs 1-1024 */
/*                             address 2048-8191 == registers 1-6144 */

/*                   R1200   - point number (1-255) */

/*                   Schlage - b'000000cccdddaaaa' */
/*                                       c - controller     (0- 7) --> (1- 8) */
/*                                       d - door number    (0- 7) --> (1- 8) */
/*                                       a - address        (0-15) */
/*                                                0 - monitor 1 */
/*                                                1 - monitor 2 */
/*                                                2 - monitor 3 */
/*                                                3 - monitor 4 */
/*                                                4 - access card reader */
/*                                                5 - door monitior */
/*                                                6 - door lock */
/*                                                7 - msm */
/*                                                8 - coax */
/*                                                9 - sensor */
/*                                               10 - 708p communications */
/*                                               11 - building status */
/*                                               12 - 708 power */
/*                                               13 - 764 power */
/*                                               14 - 708 tamper */
/*                                               15 - 764 tamper */

/*                   PMX     - PMX's internal point number */

/*                   IPC     - i/o number. */
/*                             (0-8179 represents 1-8180) */

/*                   MODICON - bits 15-0  - address */
/*                                          (0-8179 represents 1-8180) */

/*                   S9000   - type 0:   i/o number */
/*                             type 1,2: block*32+index */

/*                   LCN     - record number in LCNPAD file allocated */
/*                             to this point. */

/*                   UxS(LCN)- LCN internal point ID in LCNPAD file allocated */
/*                             to this point. */

/*                   BB	    - entry number in SCNPAD record */
/*                             (one SCNPAD record per rtu). */

/*                   EXCEL   - bits 15-14 - i/o type */
/*                                                0 - digital board */
/*                                                1 - combination dig/ana board */
/*                                                2 - parameter */
/*                                                3 - z register */
/*                             bits 13-7  - board number (0-8) */
/*                                            board 0   - system status */
/*                                            board 1-7 - input boards */
/*                                            board 8   - alarms */
/*                                          file number (0-127) */
/*                             bits 6-0   - point number -1 (0-35) */
/*                                          parameter number -1 (0-126) */
/*                                          z-register number -1 (0-126) */

/*                             for i/o type = 0 and 1, bit 13 = 0      input */
/*                                                     bit 13 = 1      output */

/*                   SMITH    - bits 10-6 - function code (01-28) */
/*                                                01 - skid density values */
/*                                                02 - skid BS&W values */
/*                                                03 - skid live values */
/*                                                04 - meter live values */
/*                                                26 - daily report - meter */
/*                                                27 - daily report - skid */
/*                              bits 5-2  - subset        (01-12) */
/*                              bits 1-0  - meter no.-1   (0-3) */
/*                   LOGITROL - bits 10   - table (0=output ,1=input) */
/*                              bits 9-0  - address (0-1023 represents 1-1024) */

/*                   ALLEN BRADLEY - data table word address */
/*                                   0-377 octal */

/*                   SQUARE D PLC bit 15 - 0 = register */
/*                                         1 = status input */
/*                                bit 12-0 address  (0 - 8191) */
/*                                         (0 - 8191 represents 1 - 8192) */

/*                   ASIC    - b'0000ccccctttaaaa' */
/*                                       c - controller      (0-31) --> (1-32) */
/*                                       t - data type */
/*                                                0 - */
/*                                                1 - input */
/*                                                2 - status */
/*                                                3 - level 0 SP's */
/*                                                4 - level 1 SP's */
/*                                                5 - level 2 SP's */
/*                                                6 -   RAM   SP's */
/*                                                7 - coefficients */
/*                                       a - address         (0-15) --> (1-16) */

/*                   GEM80   - Bits  9-5   - Block No. (0-31) */
/*                             Bits  4-0   - Word No.  (0-29) */

/*                   PLC720  - bits 11-0   - relay number */
/*                                           bit 0 = 0 is external relay */
/*                                           bit 0 = 1 is internal relay */

/*                   HLAC    - address  0-1024 - bit values */
/*                                              0- 63 lift status */
/*                                             64-191 floor status */
/*											  192-199 comm status */
/*											  200-207 spare status bits */
/*											  208-271 altenate floor map status */
/*											  272-335 emergency power status */
/*											  336-399 lift fire status */
/*											  400-473 lift door status */
/*											  464-527 lift start status */
/*											  528-591 lift emergency stop status */
/*											  592-655 lift ind srv status */
/*											  656-719 lift alarm status */
/*											  720-1023 spare */

/*                                    1024-1280 - analog values */

/*  TEXAS INSTRUMENTS 560/65 - bits 15-0  - address (1-8191) */

/*                   EXCEL+  - bits 12-5  - point number (1-199) */
/*                                   4-0  - item no. (1-28) */
/*                   HPEP    - bits 12-5  - point number (1-255) */
/*                                   4-0  - item no. (1-28) */
/*                   CNI     - bits 14-7  - point number (1-255) */
/*                                   6-0  - sub-device number (1-99) */

/*                   CMC300  - bits  4-0  - parameter number (0-31) */


/*                   ASEA PLC: rrrrr DISTS bb */
/*                             rrrrr DIVAL */
/*                             rrrrr DOSTS bb */
/*                             rrrrr DOVAL */
/*                             rrrrr AISTS bb */
/*                             rrrrr AIVAL [R32 | U4095] */
/*                             rrrrr AOSTS bb */
/*                             rrrrr AOVAL [R32 | U4095] */
/*                             rrrrr DAT   [    | R32  | U4095 | */
/*                                          U16B| S16B | BIT bb] */

/*                              where: */
/*                                  rrrrr - record number (1 -32767) */
/*                                  bb - bit number (1 - 12 or 32 for DAT) */

/*                   DBscan  - bits 14-0  - word number (1-32767) */

/*                   XL500   - address - pad entry */
/*			      format  - point attribute (0-255) */

/*                   Hitachi - bits 15-14 - address type */
/*						0 - bit, 1-word, 2-dble */
/*			      bits 13-0  - pseudo address (0-16k) */

/*                   D1000   - address - group*42 + point - 1 */
/*			      format  - grouptype*16 + pointtype */

/*                   OMNI    - bits 15-0  - address */
/*                                      (0-8191 represents 1-8192) */
/*                                      1XXX - discrete registers */
/*                                      3XXX & 13XXX - short integer */
/*                                      5XXX & 15XXX - long integer */
/*                                      7XXX & 17XXX - IEEEFP */
/*                                      (use OFFSET to access upper addresses) */

/*                   GE90    - RTU type 0   (OFFSET is NOT allowed) */
/*                                  bits 13-0 - address */
/*                                      RTU address   <==>   PLC address */
/*                                         0 - 1535          %I  0 - 1535 */
/*                                      1536 - 3071          %Q  0 - 1535 */
/*                                      3072 - 4607          %M  0 - 1535 */
/*                                      4608 - 4639          %T  0 -   31 */
/*                                      4640 - 4655          %S  0 -   15 */
/*                                      4656 - 4671          %SA 0 -   15 */
/*                                      4672 - 4687          %SB 0 -   15 */
/*                                      4688 - 4703          %SC 0 -   15 */
/*                                      4704 - 5663          %G  0 -  959 */
/*                                      5664 - 8191           (illegal) */
/*                             RTU type 1   (use OFFSET to access upper addresses) */
/*                                  bits 15-14 - offset (0,1,2 or 3) */
/*                                  bits 13-0  - address */
/*                                      RTU address   <==>   PLC address (offset=0) */
/*                                         0 - 4196          %R  0 - 4195 */
/*                                      4196 - 6143          %AI 0 - 2047 */
/*                                      6144 - 8191          %AQ 0 - 2047 */

/*                   UMAX    - address - pad entry */
/*                             Micromax address in ASCII and HEX formats */


/*                   Fieldbus- address - pad entry */
/*                             Fieldbus address in "Blocktag.Param" format */

/*                   Moore Mycro - address - pad entry */
/*                                 Moore Mycro channel, parameter, tuning parameter */
/*                                 type, command source and ASCII address */

/*                   H7800   - address - pad entry */
/*                             Point number and point name */

/*                   SMS7    - address - pad entry */
/*                             Point name - eqivalent to Siemens S7 variable name */
/*								(ASCII) */

/*                   Bailey Infi 90 - address - pad entry */
/*                             Import points - Bailey loop/pcu/module/block number */
/*                             Export points - Bailey export point index */

/*                   Universal Modbus - */
/*                            5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 */
/*                           --------------------------------- */
/*                           !A! B !    raw  address         ! */
/*                           --------------------------------- */

/*                           A - Unused (HXR file is only 32K) */
/*                           B - Address type */
/*                             - 0 = digital output */
/*                             - 1 = digital input */
/*                             - 2 = 3X address */
/*                             - 3 = 4X address */

/*                   Moore APACS - address - pad entry */
/*                             DataTag name (ASCII) in APACS format */

/*                   Bristol Babcock OpenBSI - address - pad entry */
/*                             Signal or Array point details */

/*                   DNP3    - address - pad entry */
/*                             DNP Object Type, Variation & Address */


#endif	
