#if	!defined(TRBSZ)

/*                   TRBTBL - task request table */
/*                   --------------------------- */

/*     SCCS REVISION: */
/*         @(#)trbtbl_def,v	830.1.1.1 */

/*     DESCRIPTION: */
/*         Holds task request and status information for each task. A task is */
/*         parallel to a UNIX process. Each record is indexed by the lrn */
/*         (logical resource number) which is unique for each task. Lrn of */
/*         -1 is used for interactive utilities. */


/*     ----------------------------------------------------------------------- */
/*     NOTES - is in memory only */
/*           - is platform dependent */
/*     ----------------------------------------------------------------------- */

#include	"src/lrns"

#define	TRBSZ	32	 /*  size of TRBTBL record */
#define	TNMSZ	20	 /*  max size of task name */


/*	Bits used as flags for T_flags.			(V-VMS only, U-UNIX only) */

#define	T_STSCHG	0x8000	 /*  add/delete status changed */
#define	T_FNLSTS	0x4000	 /*  final status */
#define	T_WSA	0x2000	 /*  NT TCP cleanup required on termination	NT */
#define	T_SPAWNED	0x1000	 /*  set if task requested via sptsk */
#define	T_THREAD	0x0800	 /*  set if this is a thread of a multi-thread	NT */
/* 						 ;* process and can only be recreated from */
/* 						 ;* within that process. */
#define	T_BLOCKED	0x0400	 /*  set if task is suspended in an i/o routine */
#define	T_GOTUSR1	0x0200	 /*  received SIGUSR1 request			V */
#define	TRB_LOCK	8     /*  trbtbl lock bit number			V */
#define	T_LOCK	0x0100	 /*  trbtbl lock mask				V */
#define	T_ACTIVE	0x0080	 /*  set in TRM04 on startup,cleared on $HIBER	V */
#define	T_PROFILE	0x0040	 /*  set if profiling is to be toggled on/off	U */
#define	T_READY	0x0020	 /*  task has come out of trm04 in gbload */
#define	T_GBLOAD	0x0010	 /*  GBLOAD() has occored (used by tstskb()) */
#define	T_SIGUSR2	0x0008	 /*  set if SIGUSR2 has intr routine installed	U */
#define	T_SIGUSR1	0x0004	 /*  set if SIGUSR1 has intr routine installed */
#define	T_DELETE	0x0002	 /*  set if task to be deleted on next trm */
#define	T_RQTSKB	0x0001	 /*  set if task requested via rqtskb */

/*	Full flags mask for T_flags */

#define	T_NEW_TASK	0  /*  full mask for a task just created */
#define	T_DELETED_TASK	0  /*  full mask for a task that has been deleted */

/*	Flags for queue flags */

#define	Q_IGNORE	0x0001	 /*  do not take queue OOS if it is full */



	struct t_TRBTBL {
		/* sequence */

#if	defined(VMS)
		int4   waitpid;	/*   1 pid of waiting proccess (lrn on NT) */
		int4   trbpid;	/*   3 process id of this trb entry's process */
				/*     if nonzero this process has been */
				/*     forked and ready for requests */
		int4   trbtid;	/*   5 thread  id (not used) */
		int4   cptime;	/*   7 user + system time updated by trm04 */
		int2   return_st;	/*   9 return status from task */
		int2   T_flags;	/*  10 see definitions above */
		int2   semnum;	/*  11 task's request semaphore number */
		int2   spare12[3];	/*  12 */

#elif	defined(NT)
		int4   waittid;	/*   1 thread id of waiting thread */
		int4   trbpid;	/*   3 process id of this trb entry's process */
		int4   trbtid;	/*   5 thread  id of this trb entry's thread */
				/*     if nonzero this process has been */
				/*     forked and ready for requests */
		int4   cptime;	/*   7 user + system time updated by trm04 */
		int2   return_st;	/*   9 return status from task (do not move) */
		int2   T_flags;	/*  10 see definitions above */
		int2   semnum;	/*  11 task's request semaphore number */
		int2   spare12;	/*  12 */
		int4   t_fn;		/*  13 task termination function */

#else	
	/*  a task exists if either rqclpid or trbpid are non zero */
		int4   rqclpid;	/*   1 process id of trbpid's rqcl child */
				/*     if nonzero this process is waiting */
				/*     on a pipe ready to re-request */
				/*     the main process trbpid. It is only */
				/*     used when a rqcl call has been made */
		int4   trbpid;	/*   3 process id of this trb entry's process */
				/*     if nonzero this process has been */
				/*     forked and ready for requests */
		int4   trbtid;	/*   5 thread  id (not used) */
		int4   cptime;	/*   7 user + system time updated by trm04 */
		int2   return_st;	/*   9 return status from task (do not move) */
		int2   T_flags;	/*  10 see definitions above */
		int2   semnum;	/*  11 task's request semaphore number */
		int2   spare12[3];	/*  12 */
#endif	

		char taskname[TNMSZ]; /*  15 filename of task (for trmtsk) */
		float  active;	/*  25 amount of time task is active in percent */
		float  usage;	/*  27 amount of cp used by task     in percent */
		int2   priority;	/*  29 initial task priority */
		int2   q_flag;	/*  30 redundant queue flag */
		int2   q_threshold;	/*  31 redundant queue threshold value */
		int2   q_wait;	/*  32 redundat queue wait period */
	};


#if	defined(COMMON_EXISTS)
/*       type (t_TRBTBL) GBtrbtbl(NUM_LRNS) */
/*       equivalence (TRBTBL , GBtrbtbl) */
#endif	



/* -------------------------------------------------------- */
/* The following offsets are used to map the parameter block */
/* for requests eminating from the display subsystem or */
/* the report subsystem. Param1 through param4 have */
/* specific meanings to the requested task. */
/* The size of the parameter block is PBKSZ. */
/* -------------------------------------------------------- */
#define	PBK_CRT	1  /*  crt number */
#define	PBK_PAR1	2  /*  parameter 1 */
#define	PBK_PAR2	3  /*  parameter 2 */
#define	PBK_OBJID	4  /*  affected object id */
#define	PBK_PBX	5  /*  pushbutton X coordinate */
#define	PBK_PBY	6  /*  pushbutton Y coordinate */
#define	PBK_PBXW	7  /*  pushbutton X world coordinate */
#define	PBK_PBYW	8  /*  pushbutton Y world coordinate */
#define	PBK_PAR3	9  /*  parameter 3 */
#define	PBK_PAR4	10  /*  parameter 4 */
#define	PBK_PAR1_	11  /*  parameter 1 (int4) */
#define	PBK_PAR2_	13  /*  parameter 2 (int4) */
#define	PBK_PAR3_	15  /*  parameter 3 (int4) */
#define	PBK_PAR4_	17  /*  parameter 4 (int4) */
#define	PBK_PATH	21  /*  pf path name or display name */
#define	PBK_PATH_SZ	512 /*  size of name (char) */
#define	BIG_PATH_SZ	8200 /*  size of name (char) */
#define	PBKSZ	PBK_PATH_SZ/2+20 /*  size of parameter block */
#define	BIG_PBKSZ	BIG_PATH_SZ/2+20 /*  size of big parameter block */

	struct prm {
		int2   crt;
		int2   param1;
		int2   param2;
		int2   objid;		/*  object id */
		int2   pbx;			/*  pushbutton x char  coordinate */
		int2   pby;			/*       "     y char  coordinate */
		int2   pbxw;			/*       "     x world coordinate */
		int2   pbyw;			/*       "     y world coordinate */
		int2   param3;
		int2   param4;
		int4   param1l;
		int4   param2l;
		int4   param3l;
		int4   param4l;
		int2   spare;
		int2   pathlen;
		int2   path[PBK_PATH_SZ/2];	/*  pf path or display name */
	};

	struct bigprm {
		int2   crt;
		int2   param1;
		int2   param2;
		int2   objid;		/*  object id */
		int2   pbx;			/*  pushbutton x char  coordinate */
		int2   pby;			/*       "     y char  coordinate */
		int2   pbxw;			/*       "     x world coordinate */
		int2   pbyw;			/*       "     y world coordinate */
		int2   param3;
		int2   param4;
		int4   param1l;
		int4   param2l;
		int4   param3l;
		int4   param4l;
		int2   spare;
		int2   pathlen;
		int2   path[BIG_PATH_SZ/2];	/*  pf path or display name or protocol data */
	};

/*       List of 8 point/parameter numbers */

#define	UPLIST_SZ	16 /*  size of t_updatelist in words */

	struct t_updatelist {
		int2   points[8];
		int2   params[8];
	};



#define trbtbl t_TRBTBL

EXTERN_C int2 AssignLrn	_DECLARE((int2* lrn));
EXTERN_C int2 AssignLrn2	_DECLARE((int2* lrn, char *name));
EXTERN_C int2 DeassignLrn	_DECLARE((void));
EXTERN_C void enb_debugging	_DECLARE((void));



#endif	
